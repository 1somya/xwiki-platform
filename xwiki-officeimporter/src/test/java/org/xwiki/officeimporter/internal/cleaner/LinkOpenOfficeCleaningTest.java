/*
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
package org.xwiki.officeimporter.internal.cleaner;

import java.io.StringReader;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/**
 * Test case for cleaning html links ({@code<a/>} elements) in {@link OpenOfficeHTMLCleaner}.
 * 
 * @version $Id$
 * @since 1.8
 */
public class LinkOpenOfficeCleaningTest extends AbstractHTMLCleaningTest
{
    /**
     * Test wrapping of html links with xwiki specific xhtml elements so that XHTML parser can recognize them.
     */
    public void testLinkWrapping()
    {
        String html = header + "<a href=\"http://www.xwiki.org\">xwiki</a>" + footer;
        Document doc = openOfficeHTMLCleaner.clean(new StringReader(html));
        NodeList nodes = doc.getElementsByTagName("a");
        assertEquals(1, nodes.getLength());
        Node link = nodes.item(0);
        Element span = (Element) link.getParentNode();
        assertEquals("span", span.getNodeName());
        assertEquals("wikiexternallink", span.getAttribute("class"));
        Node startComment = span.getPreviousSibling();
        assertEquals(Node.COMMENT_NODE, startComment.getNodeType());
        assertTrue(startComment.getNodeValue().startsWith("startwikilink"));
        Node stopComment = span.getNextSibling();
        assertEquals(Node.COMMENT_NODE, stopComment.getNodeType());
        assertTrue(stopComment.getNodeValue().startsWith("stopwikilink"));
    }

    /**
     * The html generated by open office server includes anchors of the form {@code<a name="table1"><h1>Sheet 2:
     * <em>Hello</em></h1></a>} and the default html cleaner converts them to {@code <a name="table1"/><h1><a
     * name="table1">Sheet 1: <em>Hello</em></a></h1>} this is because of the close-before-copy-inside
     * behaviour of default html cleaner. Thus the additional (copy-inside) anchor needs to be ripped off.
     */
    public void testDuplicateAnchorRemoving()
    {
        String html = header + "<a name=\"table1\"/><h1><a name=\"table1\">Sheet 1: <em>Hello</em></a></h1>" + footer;
        Document doc = openOfficeHTMLCleaner.clean(new StringReader(html));
        NodeList nodes = doc.getElementsByTagName("a");
        assertEquals(1, nodes.getLength());
        Element parent = (Element) nodes.item(0).getParentNode();
        assertEquals("body", parent.getNodeName());
    }

    /**
     * Test wrapping of html anchors with xwiki specific xhtml elements so that XHTML parser can recognize them.
     */
    public void testAnchorWrapping()
    {
        String html = header + "<a name=\"name\"/>" + footer;
        Document doc = openOfficeHTMLCleaner.clean(new StringReader(html));
        NodeList nodes = doc.getElementsByTagName("a");
        assertEquals(1, nodes.getLength());
        Node anchor = nodes.item(0);
        Node beforeComment = anchor.getPreviousSibling();
        assertEquals(Node.COMMENT_NODE, beforeComment.getNodeType());
        assertEquals("startmacro:id|-|name=\"name\"|-|", beforeComment.getNodeValue());
        Node afterComment = anchor.getNextSibling();
        assertEquals(Node.COMMENT_NODE, afterComment.getNodeType());
        assertEquals("stopmacro", afterComment.getNodeValue());
    }
}
