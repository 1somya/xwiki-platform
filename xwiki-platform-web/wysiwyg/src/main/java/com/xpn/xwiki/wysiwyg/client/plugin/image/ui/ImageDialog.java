package com.xpn.xwiki.wysiwyg.client.plugin.image.ui;

import java.util.List;
import java.util.Map;

import com.google.gwt.user.client.Window;
import com.google.gwt.user.client.rpc.AsyncCallback;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.ChangeListener;
import com.google.gwt.user.client.ui.ClickListener;
import com.google.gwt.user.client.ui.FileUpload;
import com.google.gwt.user.client.ui.FlowPanel;
import com.google.gwt.user.client.ui.FormHandler;
import com.google.gwt.user.client.ui.FormPanel;
import com.google.gwt.user.client.ui.FormSubmitCompleteEvent;
import com.google.gwt.user.client.ui.FormSubmitEvent;
import com.google.gwt.user.client.ui.HTML;
import com.google.gwt.user.client.ui.Label;
import com.google.gwt.user.client.ui.Panel;
import com.google.gwt.user.client.ui.ScrollPanel;
import com.google.gwt.user.client.ui.Widget;
import com.xpn.xwiki.wysiwyg.client.WysiwygService;
import com.xpn.xwiki.wysiwyg.client.editor.Strings;
import com.xpn.xwiki.wysiwyg.client.plugin.image.ImageHTMLGenerator;
import com.xpn.xwiki.wysiwyg.client.widget.CompositeDialogBox;
import com.xpn.xwiki.wysiwyg.client.widget.PageSelector;
import com.xpn.xwiki.wysiwyg.client.widget.SpaceSelector;
import com.xpn.xwiki.wysiwyg.client.widget.WikiSelector;

/**
 * Dialog for the image insert plugin, to handle choosing an image to insert from the existing images or uploading a new
 * one.
 * 
 * @version $Id$
 */
public class ImageDialog extends CompositeDialogBox implements ClickListener, FormHandler, ChangeListener
{
    /**
     * The HTML block for the image to be inserted. Will be generated by the {@link ImageHTMLGenerator} and returned to
     * the image plugin on dialog close.
     */
    private String imageHTMLBlock;

    /**
     * The file upload input used for the new images upload.
     */
    private FileUpload fileUploadInput;

    /**
     * The upload form for uploading new files to the selected page.
     */
    private FormPanel uploadForm;

    /**
     * Panel with the existing images previews.
     */
    private FlowPanel imagesPanel;

    /**
     * Selector for the wiki to get images from.
     */
    private WikiSelector wikiSelector;

    /**
     * Selector for the space to get images from.
     */
    private SpaceSelector spaceSelector;

    /**
     * Selector for the page to get images from.
     */
    private PageSelector pageSelector;

    /**
     * The wiki of the document we are currently editing.
     */
    private String currentWiki;

    /**
     * The space of the document we are currently editing.
     */
    private String currentSpace;

    /**
     * The page name of the document we are currently editing.
     */
    private String currentPage;

    /**
     * Creates an image insertion dialog, for the referred page, and the default file upload url.
     * 
     * @param currentWiki the wiki of the document we are currently editing.
     * @param currentSpace the space of the document we are currently editing.
     * @param currentPage the page of the document we are currently editing.
     */
    public ImageDialog(String currentWiki, String currentSpace, String currentPage)
    {
        super(false, true);
        getDialog().setText(Strings.INSTANCE.image());
        FlowPanel mainPanel = new FlowPanel();

        this.currentWiki = currentWiki;
        this.currentSpace = currentSpace;
        this.currentPage = currentPage;

        mainPanel.add(getImagesPanel());
        mainPanel.add(getFileUploadForm(getUploadURL(), "filepath"));
        mainPanel.addStyleName("xImageDialogMain");

        initWidget(mainPanel);
    }

    /**
     * @return the upload url for the current wiki, space and page selection.
     */
    private String getUploadURL()
    {
        String parsedCurrentSpace = (currentSpace == null) ? "Main" : currentSpace;
        String parsedCurrentPage = (currentPage == null) ? "WebHome" : currentPage;
        return "../../upload/" + parsedCurrentSpace + "/" + parsedCurrentPage;
    }

    /**
     * @param uploadURL the URL to which the files are uploaded
     * @param fileInputName the name of the file input in the file upload form
     * @return the upload form for the attached file
     */
    private FormPanel getFileUploadForm(String uploadURL, String fileInputName)
    {
        uploadForm = new FormPanel();
        uploadForm.addStyleName("xUploadForm");
        uploadForm.setAction(uploadURL);
        uploadForm.setEncoding(FormPanel.ENCODING_MULTIPART);
        uploadForm.setMethod(FormPanel.METHOD_POST);
        FlowPanel panel = new FlowPanel();
        uploadForm.setWidget(panel);

        panel.add(new Label(Strings.INSTANCE.fileUploadLabel()));

        fileUploadInput = new FileUpload();
        fileUploadInput.setName(fileInputName);
        panel.add(fileUploadInput);

        panel.add(new Button(Strings.INSTANCE.fileUploadSubmitLabel(), new ClickListener()
        {
            public void onClick(Widget sender)
            {
                uploadForm.submit();
            }
        }));

        uploadForm.addFormHandler(this);
        return uploadForm;
    }

    /**
     * {@inheritDoc}
     * 
     * @see FormHandler#onSubmit(FormSubmitEvent)
     */
    public void onSubmit(FormSubmitEvent event)
    {
        if (fileUploadInput.getFilename().trim().length() == 0) {
            Window.alert(Strings.INSTANCE.fileUploadNoPathError());
            event.setCancelled(true);
        }
    }

    /**
     * {@inheritDoc}
     * 
     * @see FormHandler#onSubmitComplete(FormSubmitCompleteEvent)
     */
    public void onSubmitComplete(FormSubmitCompleteEvent event)
    {
        updateImagesPanel();
        resetSelectors();
    }

    /**
     * @return the panel holding the images preview, for the user to choose an image to insert in the document.
     */
    private Panel getImagesPanel()
    {
        Panel imageChooserPanel = new FlowPanel();
        imageChooserPanel.addStyleName("xImageChooser");
        
        ScrollPanel containerPanel = new ScrollPanel();
        containerPanel.addStyleName("xImagesContainerPanel");
        Label chooseLabel = new Label(Strings.INSTANCE.fileChooseLabel());
        imagesPanel = new FlowPanel();
        containerPanel.add(imagesPanel);
        updateImagesPanel();        
        imageChooserPanel.add(chooseLabel);
        imageChooserPanel.add(getSelectorsPanel());
        imageChooserPanel.add(containerPanel);

        return imageChooserPanel;
    }

    /**
     * @return the panel with the selectors to choose the source for the attachments panel.
     */
    private Panel getSelectorsPanel()
    {
        // create selectors for the page to get images from
        FlowPanel selectorsPanel = new FlowPanel();
        wikiSelector = new WikiSelector();
        spaceSelector = new SpaceSelector(currentWiki);
        spaceSelector.refreshList(currentSpace);
        pageSelector = new PageSelector(currentWiki, currentSpace);
        pageSelector.refreshList(currentPage);
        wikiSelector.setVisible(false);
        WysiwygService.Singleton.getInstance().isMultiWiki(new AsyncCallback<Boolean>()
        {
            public void onFailure(Throwable caught)
            {
                throw new RuntimeException(caught.getMessage());
            }

            public void onSuccess(Boolean result)
            {
                wikiSelector.setVisible(result);
                if (result) {
                    wikiSelector.refreshList(currentWiki);
                }
            }
        });

        wikiSelector.addChangeListener(this);
        spaceSelector.addChangeListener(this);

        Button updateImagesListButton = new Button(Strings.INSTANCE.fileUpdateListButton());

        updateImagesListButton.addClickListener(new ClickListener()
        {
            public void onClick(Widget sender)
            {
                onUpdateSelection();
            }
        });

        selectorsPanel.add(wikiSelector);
        selectorsPanel.add(spaceSelector);
        selectorsPanel.add(pageSelector);
        selectorsPanel.add(updateImagesListButton);

        return selectorsPanel;
    }

    /**
     * {@inheritDoc}
     * 
     * @see ChangeListener#onChange(Widget)
     */
    public void onChange(Widget sender)
    {
        if (sender == pageSelector) {
            // nothing
        }
        if (sender == wikiSelector) {
            spaceSelector.setWiki(wikiSelector.getSelectedWiki());
            spaceSelector.refreshList(currentSpace, new AsyncCallback<List<String>>()
            {
                public void onFailure(Throwable caught)
                {
                }

                public void onSuccess(List<String> result)
                {
                    pageSelector.setWiki(wikiSelector.getSelectedWiki());
                    pageSelector.setSpace(spaceSelector.getSelectedSpace());
                    pageSelector.refreshList(currentPage);
                }
            });
        }
        if (sender == spaceSelector) {
            pageSelector.setWiki(wikiSelector.getSelectedWiki());
            pageSelector.setSpace(spaceSelector.getSelectedSpace());
            pageSelector.refreshList(currentPage);
        }
    }

    /**
     * Updates the data in the widget when the selection of wiki, page and space is updated.
     */
    private void onUpdateSelection()
    {
        if (wikiSelector.isVisible()) {
            currentWiki = wikiSelector.getSelectedWiki();
        }
        currentSpace = spaceSelector.getSelectedSpace();
        currentPage = pageSelector.getSelectedPage();
        // update the upload url of the file upload form
        uploadForm.setAction(getUploadURL());
        // update the images preview panel
        updateImagesPanel();
    }

    /**
     * Resets the selection in the wiki, space and page selectors to match the current selection.
     */
    private void resetSelectors()
    {
        if (wikiSelector.isVisible() && !wikiSelector.getSelectedWiki().equals(currentWiki)) {
            for (int i = 0; i < wikiSelector.getItemCount(); i++) {
                if (currentWiki.equals(wikiSelector.getItemText(i))) {
                    wikiSelector.setSelectedIndex(i);
                    break;
                }
            }
        }
        if (!spaceSelector.getSelectedSpace().equals(currentSpace)) {
            for (int i = 0; i < spaceSelector.getItemCount(); i++) {
                if (currentSpace.equals(spaceSelector.getItemText(i))) {
                    spaceSelector.setSelectedIndex(i);
                    break;
                }
            }
        }
        if (!pageSelector.getSelectedPage().equals(currentPage)) {
            for (int i = 0; i < pageSelector.getItemCount(); i++) {
                if (currentPage.equals(pageSelector.getItemText(i))) {
                    pageSelector.setSelectedIndex(i);
                    break;
                }
            }
        }
    }

    /**
     * Populates the images panel with the images in the passed map.
     * 
     * @param images the list of images given by their URL and corresponding file names.
     */
    public void populateImagesPanel(Map<String, String> images)
    {
        for (Map.Entry<String, String> imageData : images.entrySet()) {
            final ImagePreviewWidget imageWidget = new ImagePreviewWidget(imageData.getKey(), imageData.getValue());
            imageWidget.addClickListener(ImageDialog.this);
            imagesPanel.add(imageWidget);
        }
        // Add a div for float clear
        Panel clearPanel = new FlowPanel();
        clearPanel.addStyleName("clear");
        imagesPanel.add(clearPanel);
    }

    /**
     * Fetches the new images list and repopulates the images panel with the new images.
     */
    public void updateImagesPanel()
    {
        imagesPanel.clear();
        WysiwygService.Singleton.getInstance().getImageAttachments(currentWiki, currentSpace, currentPage,
            new AsyncCallback<Map<String, String>>()
            {
                public void onFailure(Throwable caught)
                {
                    imagesPanel.add(new HTML(Strings.INSTANCE.fileListFetchError()));
                }

                public void onSuccess(Map<String, String> result)
                {
                    populateImagesPanel(result);
                }
            });
    }

    /**
     * {@inheritDoc}
     * 
     * @see ClickListener#onClick(Widget)
     */
    public void onClick(Widget sender)
    {
        if (sender instanceof HasImage) {
            String parsedCurrentSpace = (currentSpace == null) ? "Main" : currentSpace;
            String parsedCurrentPage = (currentPage == null) ? "WebHome" : currentPage;
            imageHTMLBlock =
                ImageHTMLGenerator.getInstance().getAttachedImageHTML((HasImage) sender, parsedCurrentSpace,
                    parsedCurrentPage);
            this.hide();
        }
    }

    /**
     * @return the image HTML block built as a result of the user input in this dialog.
     */
    public String getImageHTMLBlock()
    {
        return imageHTMLBlock;
    }
    
    /**
     * {@inheritDoc}
     * 
     * @see CompositeDialogBox#center()
     */
    public void center()
    {
        super.center();
        // reset the value of the block each time we show this dialog.
        imageHTMLBlock = null;
    }
}
