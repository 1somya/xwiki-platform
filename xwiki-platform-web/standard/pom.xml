<!--
 *
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 *
-->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.xpn.xwiki.platform</groupId>
    <artifactId>xwiki-web</artifactId>
    <version>2.0-SNAPSHOT</version>
  </parent>
  <artifactId>xwiki-web-standard</artifactId>
  <name>XWiki Platform - Web - Standard</name>
  <packaging>war</packaging>
  <description>The standard XWiki WAR</description>
  <dependencies>
    <dependency>
      <groupId>com.xpn.xwiki.platform</groupId>
      <artifactId>xwiki-core</artifactId>
      <version>${platform.core.version}</version>
    </dependency>
    <!-- Add the GWT JAR so that XWiki Core is GWT-ready and so that the XWiki GWT Servlet can
         be activated by default in web.xml -->
    <dependency>
      <groupId>com.xpn.xwiki.platform</groupId>
      <artifactId>xwiki-web-gwt</artifactId>
      <version>${pom.version}</version>
    </dependency>
    <dependency>
      <groupId>com.xpn.xwiki.platform</groupId>
      <artifactId>xwiki-web-wysiwyg</artifactId>
      <version>${pom.version}</version>
      <type>war</type>
    </dependency>
    <!-- The WebDAV module -->
    <dependency>
      <groupId>com.xpn.xwiki.platform</groupId>
      <artifactId>xwiki-webdav</artifactId>
      <version>${platform.core.version}</version>
    </dependency>
    <!-- The REST module -->
    <dependency>
      <groupId>com.xpn.xwiki.platform</groupId>
      <artifactId>xwiki-rest</artifactId>
      <version>${platform.core.version}</version>
    </dependency>
    <!-- Skin modules
         Note: even though the dependency plugin below doesn't need explicit dependencies set
         to work it's a best practice to put them here since they are real dependencies -->
    <dependency>
      <groupId>org.xwiki.platform.skins</groupId>
      <artifactId>xwiki-skin-albatross</artifactId>
      <version>${platform.skin.albatross.version}</version>
      <type>zip</type>
    </dependency>         
    <dependency>
      <groupId>org.xwiki.platform.skins</groupId>
      <artifactId>xwiki-skin-toucan</artifactId>
      <version>${platform.skin.toucan.version}</version>
      <type>zip</type>
    </dependency>         
    <dependency>
      <groupId>org.xwiki.platform.skins</groupId>
      <artifactId>xwiki-skin-colibri</artifactId>
      <version>${platform.skin.colibri.version}</version>
      <type>zip</type>
    </dependency>         
    <!-- needed for slf4j clients such as QueryPlugin and JCRStore 
         It is deployment time logging configuration, so it is here instead of xwiki-core. -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-log4j12</artifactId>
      <version>1.5.8</version>
      <scope>runtime</scope>
    </dependency>
  </dependencies>
  <build>
    <plugins>
      <!-- Inject XWiki's configuration -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-remote-resources-plugin</artifactId>
        <executions>
          <execution>
            <id>xwiki-configuration-resources</id>
            <!-- The remote resources plugin adds its output directory as a resource directory
                 so that the Maven resources plugin copies these resources to target/classes.
                 However copying them to target/classes will make them appear in WEB-INF/classes
                 in the generated WAR since the WAR plugin copies resources in target/classes in
                 WEB-INF/classes. Thus to prevent this we're binding this execution to a phase
                 that comes after the execution of the resources plugin (which executes in the
                 process-resources phase). Thus this remote resources plugin will execute just
                 after the resources plugin and the resources won't be copied, which is why we're
                 adding a webResource configuration element below in the WAR plugin's
                 configuration. -->
            <phase>process-resources</phase>
            <goals>
              <goal>process</goal>
            </goals>
            <configuration>
              <resourceBundles>
                <resourceBundle>org.xwiki.platform.tools:xwiki-configuration-resources:${platform.tool.configuration.version}</resourceBundle>
              </resourceBundles>
              <properties>
                <xwikiDbConnectionUrl>none</xwikiDbConnectionUrl>
              </properties>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- Unpack the Albatross Skin -->
      <plugin>
        <!-- Make sure the skins dir exists since Maven or its plugins doesn't always create it if
             doesn't exist. Note that it works fine without this in Maven 2.1.x for some reason
             but fails in Maven 2.0.x. -->
        <!-- Also make sure the minimized dir exists, since it is created only in some profiles -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <execution>
            <!-- Note that we need a phase that executes before prepare-package as otherwise the
                 Antrun plugin executes after the dependency plugin below. This is fixed in
                 Maven 2.1 (http://jira.codehaus.org/browse/MNG-2258). -->
            <phase>test</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <tasks>
                <mkdir dir="${project.build.directory}/skin" />
                <mkdir dir="${project.build.directory}/minimized" />
              </tasks>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>unpack-dependencies</id>
            <!-- Right phase is prepare-package, but it is only in maven-2.1
            <phase>prepare-package</phase>-->
            <phase>test</phase>
            <goals>
              <goal>unpack</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>org.xwiki.platform.skins</groupId>
                  <artifactId>xwiki-skin-albatross</artifactId>
                  <type>zip</type>
                  <outputDirectory>${project.build.directory}/skin</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>org.xwiki.platform.skins</groupId>
                  <artifactId>xwiki-skin-toucan</artifactId>
                  <type>zip</type>
                  <outputDirectory>${project.build.directory}/skin</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>org.xwiki.platform.skins</groupId>
                  <artifactId>xwiki-skin-colibri</artifactId>
                  <type>zip</type>
                  <outputDirectory>${project.build.directory}/skin</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <!-- We extract SmartClient library from smartGWT since smartGWT will 
                       use SmartClient from web-standard resources -->
                  <groupId>com.smartgwt</groupId>
                  <artifactId>smartgwt</artifactId>
                  <version>${smartgwt.version}</version>
                  <type>jar</type>
                  <outputDirectory>${project.build.directory}/smartclient</outputDirectory>
                  <!-- We exlude the default initsc.js file since we provide a modified 
                       version of it in web-standard sources -->
                  <excludes>**/initsc.js</excludes>
                </artifactItem>
              </artifactItems>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- TODO: Find a way to exclude the LICENSE/NOTICE files from the classes/ directory since
           we're including them in META-INF/ at the root of the WAR -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-war-plugin</artifactId>
        <configuration>
          <dependentWarExcludes />
          <webResources>
            <!-- Include Configuration resources -->
            <resource>
              <directory>${project.build.directory}/maven-shared-archive-resources</directory>
              <targetPath>WEB-INF</targetPath>
              <includes>
                <include>hibernate.cfg.xml</include>
                <include>xwiki.cfg</include>
                <include>xwiki.properties</include>
              </includes>
            </resource>
            <!-- Include License resources -->
            <resource>
              <directory>${project.build.directory}/maven-shared-archive-resources/META-INF</directory>
              <targetPath>META-INF</targetPath>
            </resource>
            <resource>
              <directory>${basedir}/src/main/webInfResources</directory>
              <targetPath>WEB-INF</targetPath>
              <filtering>true</filtering>
            </resource>
            <!-- Add the skins -->
            <resource>
              <directory>${project.build.directory}/skin</directory>
              <targetPath>skins</targetPath>
              <filtering>false</filtering>
            </resource>
            <!-- Add SmartClient library -->
            <resource>
              <directory>${project.build.directory}/smartclient/com/smartclient/public/sc</directory>
              <targetPath>resources/js/smartclient</targetPath>
              <filtering>false</filtering>
            </resource> 
            <!-- Add SmartClient skins -->
            <resource>
              <directory>${project.build.directory}/smartclient/com/smartclient/theme/enterprise/public/sc/skins</directory>
              <targetPath>resources/js/smartclient/skins</targetPath>
              <filtering>false</filtering>
            </resource>
            <resource>
              <directory>${project.build.directory}/minimized</directory>
              <targetPath>/</targetPath>
              <filtering>false</filtering>
            </resource>
          </webResources>
        </configuration>
      </plugin>
    </plugins>
    <pluginManagement>
      <plugins>
        <!-- Javascript and CSS files compression -->
        <plugin>
          <groupId>net.sf.alchim</groupId>
          <artifactId>yuicompressor-maven-plugin</artifactId>
          <version>0.7.1</version>
          <configuration>
            <!-- Don't output in the default webapp location, since the war plugin will overwrite the files in there
                 with the original, uncompressed ones. -->
            <webappDirectory>${project.build.directory}/minimized</webappDirectory>
            <jswarn>false</jswarn>
            <!-- Overwrite existing files -->
            <nosuffix>true</nosuffix>
            <includes>
              <include>resources/js/**.js</include>
              <include>resources/js/**.css</include>
              <include>resources/uicompontents/**.js</include>
              <include>resources/uicompontents/**.css</include>
            </includes>
            <excludes>
              <!-- Exclude already minified files -->
              <exclude>**/*-min.js</exclude>
              <exclude>**/*-debug.js</exclude>
              <exclude>**/langs/*.js</exclude>
              <!-- Exclude files with Velocity inside -->
              <exclude>**/actionButtons.js</exclude>
              <exclude>**/notification.css</exclude>
              <exclude>**/usersandgroups.js</exclude>
            </excludes>
          </configuration>
          <dependencies>
            <!-- The yuicompressor plugins requires a dep on plexus utils but doesn't have it declared
                 in its pom.xml so we need to add it since starting with Maven 3.x doesn't have the hack
                 that there is in Maven 2.x which automatically adds a dep on plexus-utils 1.1 if it's 
                 not declared. -->
            <dependency>
              <groupId>org.codehaus.plexus</groupId>
              <artifactId>plexus-utils</artifactId>
              <version>1.1</version>
            </dependency>
          </dependencies>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>
  <profiles>
    <profile>
      <id>debug</id>
      <!-- The debug profile doesn't have any property, its goal is to avoid JS/CSS compression -->
    </profile>
    <profile>
      <id>default</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <build>
        <plugins>
          <!-- Javascript and CSS files compression -->
          <plugin>
            <groupId>net.sf.alchim</groupId>
            <artifactId>yuicompressor-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>minify</id>
                <goals>
                  <goal>compress</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>jettyrun</id>      
      <build>
        <plugins>
          <!-- Run 'mvn install -Pjettyrun' to execute xwiki in Jetty. Useful for testing.
               Note: You'll need a database set up and running. If you use the HSQLDB profile
               the database is looked for in database/ so it's very likely you'll get an
               empty wiki. You'll need to import some pages in it using a XAR for example. -->
          <plugin>
            <groupId>org.mortbay.jetty</groupId>
            <artifactId>maven-jetty-plugin</artifactId>
            <configuration>
              <contextPath>/xwiki</contextPath>
              <classesDirectory>${project.build.directory}/${project.build.finalName}/WEB-INF</classesDirectory>
              <webAppSourceDirectory>${project.build.directory}/${project.build.finalName}/</webAppSourceDirectory>
              <scanIntervalSeconds>10</scanIntervalSeconds>
              <connectors>
                <connector implementation="org.mortbay.jetty.nio.SelectChannelConnector">
                  <port>8080</port>
                  <maxIdleTime>60000</maxIdleTime>
                </connector>
              </connectors>
            </configuration>
            <executions>
              <execution>
                <phase>package</phase>
                <goals>
                  <goal>run</goal>
                </goals>
              </execution>
            </executions>
            <!-- Add the database JAR since it's not included in the WAR. The Hibernate config
                 file is automtically added by the remote resources plugin -->
            <dependencies>
              <dependency>
                <groupId>${xwiki.db.jdbc.groupId}</groupId>
                <artifactId>${xwiki.db.jdbc.artifactId}</artifactId>
                <version>${xwiki.db.jdbc.version}</version>
                <scope>runtime</scope>
              </dependency>
            </dependencies>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-remote-resources-plugin</artifactId>
            <executions>
              <execution>
                <id>xwiki-configuration-resources</id>
                <configuration>
                  <properties>
                    <xwikiDbConnectionUrl>${xwiki.db.connection.url}</xwikiDbConnectionUrl>
                  </properties>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>ci</id>
      <activation>
        <!-- This property is automatically defined by the Release profile in the top level POM when executing
             a release. Thus this profile will be automatically enabled when releasing -->
        <property>
          <name>performRelease</name>
          <value>true</value>
        </property>
      </activation>
      <build>
        <plugins>
          <!-- Use the build number plugin to add the SVN revision number to XWiki's
               version.properties file so that it's included when displaying XWiki's version.
               Note: This plugin works by making the buildNumber property available. We then filter
               the version.properties file so that the property is replaced by its value. -->
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>buildnumber-maven-plugin</artifactId>
            <version>1.0-beta-1</version>
            <executions>
              <execution>
                <phase>validate</phase>
                <goals>
                  <goal>create</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
              <doCheck>true</doCheck>
              <doUpdate>true</doUpdate>
            </configuration>
          </plugin>
          <!-- Javascript and CSS files compression -->
          <plugin>
            <groupId>net.sf.alchim</groupId>
            <artifactId>yuicompressor-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>minify</id>
                <goals>
                  <goal>compress</goal>
                </goals>
              </execution>
            </executions>        
          </plugin>          
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
