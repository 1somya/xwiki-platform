<?xml version="1.0" encoding="UTF-8"?>
<xwikidoc>
<web>XWiki</web>
<name>ConfigurableClassMacros</name>
<language></language>
<defaultLanguage>en</defaultLanguage>
<translation>0</translation>
<parent>XWiki.ConfigurableClass</parent>
<creator>XWiki.Admin</creator>
<author>XWiki.Admin</author>
<customClass></customClass>
<contentAuthor>XWiki.Admin</contentAuthor>
<creationDate>1265775370000</creationDate>
<date>1265775370000</date>
<contentUpdateDate>1265775370000</contentUpdateDate>
<version>1.1</version>
<title>$msg.get("xe.admin.configurable.macros.title")</title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/2.0</syntaxId>
<hidden>false</hidden>
<content>{{velocity output="false"}}
## Constants:
#set($redirectParameter = 'xredirect')
#set($nameOfThisDocument = 'XWiki.ConfigurableClass')


#*
 * If this document is saved with programming access or is includeForm'd into a document with programming, we have to
 * drop programming rights in order for it to run safely because it evaluates potentially untrustworthy code.
 *###
#macro(sandboxDocument)
  #if($xcontext.hasProgrammingRights())
    $xcontext.dropPermissions()##
  #end
#end


#*
 * Any documents which are on the provided list ($documentNames) which are locked by the current user will be unlocked.
 * If this macro has programming rights, then they are unlocked programmatically, otherwise a javascript tag is
 * generated with ajax calls to cancel for all of the documents. If there are documents on this list which are not
 * locked by the current user, then they are ignored.
 *
 * @param $documentNames - List&lt;String&gt; - fullNames of documents which should be unlocked if they are locked by the
 *                                        current user.
 *###
#macro(unlockDocuments $documentNames)
  #if($documentNames.size() &gt; 0)
    #set($sql = "doc.fullName=")
    #foreach($documentName in $documentNames)
      #set($sql = "${sql}'$documentName' or doc.fullName=")
    #end
    ## Trim the dangling ' or doc.fullName=?'
    #set($sql = $sql.substring(0, $sql.lastIndexOf(' or doc.fullName=')))
    #set($sql = ", XWikiLock lock where lock.docId=doc.id and lock.userName='$xcontext.getUser()' and (${sql})")
    #set($namesOfdocumentsToUnlock = $xwiki.searchDocuments($sql))
    ## Use ajax and hope the user runs javascript.
    {{html}}
      &lt;script type="text/javascript"&gt;
        document.observe("dom:loaded", function() {
          #foreach($nameOflockedDocument in $namesOfdocumentsToUnlock)
            new Ajax.Request("$xwiki.getURL($nameOflockedDocument, 'cancel', 'ajax=1')");
          #end
        });
      &lt;/script&gt;
    {{/html}}
  #end## If output list size &gt; 0
#end


#*
 * Try to determine whether a document was edited by a user who has edit right on this page. This is tricky because
 * documents are imported with the name XWiki.XWikiGuest who has no access to anything after import.
 *
 * @param theDoc - Document who's editor should be checked for edit access on this document.
 *###
#macro(checkDocumentSavedByAuthorizedUser, $docToCheck, $currentDoc, $hasAccess)
  ## The system is started and the only user is XWikiGuest who has admin right but gives it up when he imports the default
  ## documents, we are checking to see if this looks like the guest imported the document with the first import.
  #if($docToCheck.getWiki() == $xcontext.getMainWikiName()
      &amp;&amp; $docToCheck.getVersion() == '1.1'
      &amp;&amp; $docToCheck.getCreator() != $docToCheck.getContentAuthor()
      &amp;&amp; $docToCheck.getContentAuthor() == 'XWiki.XWikiGuest')
  ##
    #set($userToCheck = $docToCheck.getCreator())
  #else
    #set($userToCheck = $docToCheck.getAuthor())
  #end
  #set ($hasAccess = $util.null)
  #setVariable ("$hasAccess" $xwiki.hasAccessLevel('edit', $userToCheck, $currentDoc))
#end


#*
 * Find names of documents which contain objects of the class 'XWiki.ConfigurableClass'
 *
 * @param $section - String - Look for apps which specify that they should be configured in this section,
 *                            if null or "" then returns them for all sections.
 *
 * @param $globaladmin - boolean - If true then we will look for applications which should be configured globally.
 *
 * @param $space - String - If not looking for apps which are configured globally, then this is the space where we
 *                          will look for apps in. If null or "" or if $globaladmin is true, then all spaces will be
 *                          searched.
 *
 * @param $outputList - List - The returns from this macro will be put in this list, passing the list as a parameter
 *                             a safety measure because macros can't return values.
 *###
#macro(findNamesOfAppsToConfigure, $section, $globaladmin, $space, $outputList)
  ## Use a parameterized sql query to prevent injection.
  #set($params = [])
  #if($section &amp;&amp; $section != '')
    #set($discard = $params.add("$section"))
    #set($sqlA = ' StringProperty as section,')
    #set($sqlB = " and section.id=obj.id and section.name='displayInSection' and section.value=?")
  #else
    ## Make sure they are "" in case they were set prior to calling the macro.
    #set($sqlA = '')
    #set($sqlB = '')
  #end
  ## Set up query based on value of $globaladmin
  #if($globaladmin == true)
    #set($sqlC = '1')
  #else
    #if($space &amp;&amp; $space != '')
      #set($sqlC = '0 and doc.space = ?')
      #set($discard = $params.add($space))
    #else
      #set($sqlC = '0')
    #end
  #end
  #set($sql = ", BaseObject as obj,$sqlA IntegerProperty as global where "
              + "doc.fullName=obj.name and obj.className='" + $nameOfThisDocument + "'$sqlB "
              + "and global.id=obj.id and global.name='configureGlobally' and global.value=$sqlC "
              + "order by doc.creationDate")
  ##
  ## Run the search
  #set($discard = $outputList.addAll($xwiki.searchDocuments($sql, 0, 0, $params)))
  ##
#end


#*
 * Show the heading for configuration for a given application.
 *
 * $appName (String) Name of the application to show configuration heading for.
 *
 * $headingAlreadyShowing (boolean) If true then we don't make another heading. Otherwise it is set to true.
 *###
#macro(showHeading, $appName, $headingAlreadyShowing)
  #if(!$headingAlreadyShowing)
    #set($headingAlreadyShowing = true)

    = $msg.get("admin.customize") __[[$appName&gt;&gt;$appName]]__: =
  #end
#end

#define($formHtml)
  #if ($objClass.getPropertyNames().size() &gt; 0)
    &lt;dl&gt;
    #foreach($propName in $objClass.getPropertyNames())
      #if($propertiesToShow.size() &gt; 0 &amp;&amp; !$propertiesToShow.contains($propName))
        ## Silently skip over this property.
      #else
        #set($prettyName = "#evaluate($app.displayPrettyName($propName, $obj))")
        ##
        ## Further processing of the field display HTML is needed.
        ## Step 1: Strip &lt;pre&gt; tags which $obj.display inserts, this won't affect content because it's escaped.
        #set($out = $obj.display($propName, 'edit').replaceAll('&lt;[/]?+pre&gt;', ''))
        ## Step 2: Select only content between first &lt; and last &gt; because $obj.display inserts html macros.
        ##         Careful not to remove html macros from the content because they are not escaped!
        #set ($out = $out.substring($out.indexOf('&lt;'), $mathtool.add(1, $out.lastIndexOf('&gt;'))))
        ## Step 3: Prepend app name to all ID and FOR attributes to prevent id collision with multiple apps on one page.
        #set ($out = $out.replaceAll(
            " id='$objClass.getName()_$obj.getNumber()_$propName", " id='${escapedAppName}_$objClass.getName()_$obj.getNumber()_$propName").replaceAll(
            " for='$objClass.getName()_$obj.getNumber()_$propName", " for='${escapedAppName}_$objClass.getName()_$obj.getNumber()_$propName"))
        ## App Name is prepended to for= to make label work with id which is modified to prevent collisions.
        &lt;dt&gt;&lt;label for="${escapedAppName}_$objClass.getName()_$obj.getNumber()_$propName"&gt;
        #if ($out.indexOf('type=''checkbox''') != -1)
          $out
        #end
        #if($linkPrefix != '')
          #set($linkScript = "$linkPrefix$propName")
          &lt;a href="$escapetool.xml("#evaluate($linkScript)")"&gt;$escapetool.xml($prettyName)&lt;/a&gt;
        #else
          $escapetool.xml($prettyName)
        #end
        &lt;/label&gt;&lt;/dt&gt;
        #if ($out.indexOf('type=''checkbox''') == -1)
          &lt;dd&gt;$out&lt;/dd&gt;
        #end
      #end## If property is in propertiesToShow
    #end## Foreach property in this class
    &lt;/dl&gt;
  #end
#end## define $formHtml
{{/velocity}}</content></xwikidoc>
