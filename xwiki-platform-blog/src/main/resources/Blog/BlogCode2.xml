<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
<web>Blog</web>
<name>BlogCode2</name>
<language></language>
<defaultLanguage>en</defaultLanguage>
<translation>0</translation>
<parent>Blog.WebHome</parent>
<creator>XWiki.Admin</creator>
<author>XWiki.Admin</author>
<customClass></customClass>
<contentAuthor>XWiki.Admin</contentAuthor>
<creationDate>1247274330000</creationDate>
<date>1251506743000</date>
<contentUpdateDate>1251506743000</contentUpdateDate>
<version>1.1</version>
<title>Macros for the Blog application 2.0</title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/2.0</syntaxId>
<hidden>true</hidden>
<content>{{include document="Blog.BlogParameters"/}}
{{velocity filter="none"}}
{{html clean="false" wiki="true"}}
##
##
##
## Import the blog skin and javascripts.
$!xwiki.ssx.use($blogStyleDocumentName)##
$!xwiki.jsx.use($blogScriptsDocumentName)##
##
##
##
#**
 * Checks to see if the Blog Plugin is available
*###
#macro(checkBlogPlugin $isAvailable)
  #if($xwiki.blog)
    #set($isAvailable=true)
  #else
    #set($isAvailable=false)
##AS TODO: Make this text being taken from a resource bundle
##    #error($msg.get('xapp.pluginnotenabled'))
    #error('The Blog Plugin is not installed or not enabled. This page will not work properly. Make sure you installed the Blog Plugin and that "com.xpn.xwiki.plugin.blog.BlogPlugin" is listed in xwiki.plugins parameter in xwiki.cfg file.')
  #end 
#end
##
##
##
#**
 * Prints a blog. This is the main macro used in the BlogSheet.
 * 
 * @param blogDoc the XDocument holding the blog definition object.
 *###
#macro(printBlog $blogDoc)
  {{include document='Blog.CreatePost'/}}
  #getBlogEntries($blogDoc $entries)
  #displayBlog($entries 'index' true true)
  #displayNavigationLinks($blogDoc)
#end
##
##
##
#**
 * Shows blog information. In view mode, the description is printed. In inline edit mode, allows changing
 * blog settings: title, description, blog type (global or in-space), index display type (fixed size pagination, weekly
 * index, monthly index, all entries).
 * 
 * @param blogDoc The blog document. It should contain a &lt;tt&gt;Blog.BlogClass&lt;/tt&gt; object.
 *###
#macro(showBlogInfo $blogDoc)
  #if($blogDoc.getObject($blogClassname))
    #if($context.action == 'inline')
      #macro(displayProperty $blogDoc $propname)
        &lt;dt&gt;#displayPropName($xwiki.getClass($blogClassname).get($propname)):&lt;/dt&gt;
        &lt;dd&gt;$blogDoc.display($propname)&lt;/dd&gt;
      #end
      &lt;dl&gt;
        #displayProperty($blogDoc 'title')
        #displayProperty($blogDoc 'description')
        #displayProperty($blogDoc 'blogType')
        #displayProperty($blogDoc 'displayType')
        #displayProperty($blogDoc 'itemsPerPage')
      &lt;/dl&gt;
    #else
      $blogDoc.display('description')
    #end
  #elseif($doc.fullName == $blogSheet)
= $msg.get('xe.blog.code.blogsheet') =
    $msg.get('xe.blog.code.sheetexplanation')
  #else
    #warning($msg.get('xe.blog.code.notblog'))
  #end
#end
##
##
##
#**
 * This method is only here to make sure that Velocity breaks when anyone is using this
*###
#macro(getBlogDocument $space $blogDoc)
  #stop
#end
##
##
##
#**
 * This method is only here to make sure that Velocity breaks when anyone is using this
*###
#macro(getBlogTitle $blogDoc $title)
  #stop
#end
##
##
##
#**
 * This method is only here to make sure that Velocity breaks when anyone is using this
*###
#macro(getBlogDescription $blogDoc $description)
  #stop
#end
#**
 * Retrieves a list of entries to be displayed. The entries are either part of the blog's space, or have the blog
 * document set as a parent. The number and range of entries returned (from all those belonging to this blog) depends on
 * the blog display type: paginated (fixed number of entries), weekly (all entries in a week), monthly (all entries in a
 * month), or all.
 * 
 * @param blogDoc The blog document. It should contain a &lt;tt&gt;Blog.BlogClass&lt;/tt&gt; object.
 * @param entries The resulting list of entries to display, a list of XDocument names.
 *###
#macro(getBlogEntries $blogDoc $entries)
  #set($blog=$xwiki.blog)
  #set($query=$blog.getBlogEntriesBaseQuery($blogPostTemplate,$blogPostClassname))
  #set($isGlobal=$blog.isBlogGlobal($blogDoc,$blogClassname))
  #if(!$isGlobal)
    #set($query = "${query} and (doc.space = '${blogDoc.space}' or doc.parent = '${blogDoc.fullName}')")
  #end
  #set($displayType=$xwiki.blog.getBlogDisplayType($blogDoc,$blogClassname))
  #if($displayType == 'weekly')
    #set($lEntries=$blog.getWeeklyBlogEntryNames($blogDoc, $query))
  #elseif($displayType == 'monthly')
    #set($lEntries=$blog.getMonthlyBlogEntryNames($blogDoc, $query))
  #elseif($displayType == 'all')
    #set($lEntries=$blog.getAllBlogEntryNames($blogDoc, $query))
  #else
    #if(!$itemsPerPage)
      #if($request.ipp)
        #set($itemsPerPage=$util.parseInt($request.ipp))
      #else
        #set($itemsPerPage=-1)
      #end
    #end
    #set($page=$util.parseInt($request.page))
    #set($lEntries=$blog.getPagedBlogEntryNames($blogDoc, $query, $blogClassname, $itemsPerPage, $page))
  #end
  #set($entries=$lEntries.entries)
  #set($totalPages=$lEntries.totalPages)
  #set($currentPageNumber=$lEntries.currentPageNumber)
#end
##
##
##
#**
 * This method is only here to make sure that Velocity breaks when anyone is using this
*###
#macro(getPagedBlogEntries $blogDoc $query $entries)
  #stop
#end
##
##
##
#**
 * This method is only here to make sure that Velocity breaks when anyone is using this
*###
#macro(getWeeklyBlogEntries $blogDoc $query $entries)
  #stop
#end
##
##
##
#**
 * This method is only here to make sure that Velocity breaks when anyone is using this
*###
#macro(getMonthlyBlogEntries $blogDoc $query $entries)
  #stop
#end
##
##
##
#**
 * This method is only here to make sure that Velocity breaks when anyone is using this
*###
#macro(getAllBlogEntries $blogDoc $query $entries)
  #stop
#end
##
##
##
#**
 * This method is only here to make sure that Velocity breaks when anyone is using this
*###
#macro(getUnpublishedBlogEntries $blogDoc $query $entries)
  #stop
#end
##
##
##
#**
 * This method is only here to make sure that Velocity breaks when anyone is using this
*###
#macro(getGlobalBlogEntries $entries)
  #stop
#end
##
##
##
#**
 * This method is only here to make sure that Velocity breaks when anyone is using this
*###
#macro(getBlogEntriesBaseQuery $query)
= Do not use 'getBlogEntriesBaseQuery' method =
  #stop
#end
##
##
##
#**
 * This method is only here to make sure that Velocity breaks when anyone is using this
*###
#macro(isBlogGlobal $blogDoc $isGlobal)
  #stop
#end
##
##
##
#**
 * This method is only here to make sure that Velocity breaks when anyone is using this
*###
#macro(getBlogDisplayType $blogDoc $displayType)
  #stop
#end
##
##
##
#**
 * Displays a list of entries.
 * 
 * @param entries The entries to display, a list of XDocument names.
 * @param displaying What exactly is displayed: blog index, a single blog entry, a blog category, search results,
 *        unpublished entries, etc. This will be used as the classname(s) for the container div (hfeed). Currently
 *        used values: index, single, category, search, unpublished, hidden.
 * @param onlyExtract If &lt;tt&gt;true&lt;/tt&gt;, only display the extract of articles where available, otherwise display the full content.
 * @param shouldDisplayTitles If &lt;tt&gt;true&lt;/tt&gt;, display the blog title (blog posts shouldn't display the title when they're
 *        displayed alone on their page since it's the page title which is used in this case)
 *###
#macro(displayBlog $entries $displaying $onlyExtract $shouldDisplayTitles)
##Display Blog
  #set($blogDay = "")
  &lt;div class="hfeed $!{displaying}"&gt;
  &lt;div class="blogDay"&gt;
  #foreach ($entry in $entries)
    #set($entryDoc = $xwiki.getDocument($entry))
    ## This fails if the document is not accessible, due to access rights.
    #if($entryDoc.fullName == $entry)
      #set($entryObj=$xwiki.blog.getEntryObject($entryDoc,$blogPostClassname))
      ## Although all entries should have one of the two objects, better check to be sure.
      #if("$!{entryObj}" != '')
        #set($entryDate=$xwiki.blog.getEntryDate($entryObj))
        ## Display a "calendar sheet" for each day. All entries posted on the same day share one such sheet.
        #set($entryDateStr = $xwiki.formatDate($entryDate, 'yyyyMMMMdd'))
        #if($blogDay != $entryDateStr)
          #if($blogDay != '')
            &lt;/div&gt;
            &lt;div class="blogDay"&gt;
          #end
          #displayBlogDate($entryDate)
          #set($blogDay = $entryDateStr)
        #end
        ## Finally, display the entry.
        #displayEntry($entryDoc $entryObj $onlyExtract $shouldDisplayTitles)
      #end
    #end
  #end
  &lt;/div&gt; ## blogDay
  &lt;/div&gt; ## hfeed
#end
##
##
##
#**
 * This method is only here to make sure that Velocity breaks when anyone is using this
*###
#macro(getEntryObject $entryDoc $entryObj)
  #stop
#end
##
##
##
#**
 * This method is only here to make sure that Velocity breaks when anyone is using this
*###
#macro(getEntryDate $entryDoc $entryObj $result)
  #stop
#end
##
##
##
#**
 * Displays a date, nicely formatted as a calendar page.
 * 
 * @param date The date to display, an instance of &lt;tt&gt;java.util.Date&lt;/tt&gt;.
 *###
#macro(displayBlogDate $date)
  #set($year = $xwiki.formatDate($date, "yyyy"))
  ## 3 letter month name, like Jan, Dec.
  #set($month = $xwiki.formatDate($date, "MMM"))
  ## Uncomment to get a full length month name, like January, December.
  ## TODO: this could be defined somewhere in the blog style.
  ## #set($month = $xwiki.formatDate($date, "MMMM"))
  #set($day = $xwiki.formatDate($date, "dd"))
  &lt;h2 class="blogdate"&gt;## title="#formatdateISO($date)"&gt;
    &lt;span class="month"&gt;$month&lt;/span&gt;
    &lt;span class="day"&gt;$day&lt;/span&gt;
    &lt;span class="year"&gt;$year&lt;/span&gt;
  &lt;/h2&gt;
#end
##
##
##
#**
 * Displays a blog article: management tools, header, content, footer.
 * 
 * @param entryDoc The xdocument of the blog post. Each post resides in its own document.
 * @param entryObj The xobject of the blog post, an instance of the &lt;tt&gt;Blog.BlogPostClass&lt;/tt&gt; xclass.
 * @param onlyExtract If &lt;tt&gt;true&lt;/tt&gt;, try to display only a summary of the entry, instead of the full content.
 * @param shouldDisplayTitle If &lt;tt&gt;true&lt;/tt&gt;, display the blog title (blog posts shouldn't display the title
 *        when they're displayed alone on their page since it's the page title which is used in this case)
 *###
#macro(displayEntry $entryDoc $entryObj $onlyExtract $shouldDisplayTitle)
  ## Only articles with an explicit hidden setting or an explicit unpublished setting are hidden
  #set($isPublished=$xwiki.blog.isPublished($entryObj))
  #set($isHidden=$xwiki.blog.isHidden($entryObj))
  #if($doc.fullName == $entryDoc.fullName)
    &lt;div class="hentry single-article"&gt;
  #else
    &lt;div class="hentry#if(!$isPublished) unpublished-article#elseif($isHidden) hidden-article#end"&gt;
  #end
  #displayEntryTools($entryDoc $entryObj)
  #if($shouldDisplayTitle)
    #displayEntryTitle($entryDoc $entryObj)
  #end
  #if($doc.fullName == $entryDoc.fullName)
    #if(!$isPublished)
      #warning($msg.get('xe.blog.code.published'))
    #elseif($isHidden)
      #warning($msg.get('xe.blog.code.hidden'))
    #end
  #end
  #displayEntryContent($entryDoc $entryObj $onlyExtract)
  #displayEntryFooter($entryDoc $entryObj)
  &lt;/div&gt; ## hentry
#end

##
##
##
#**
 * This method is only here to make sure that Velocity breaks when anyone is using this
*###
#macro(isPublished $entryObj $isPublished)
  #stop
#end
##
##
##
#**
 * This method is only here to make sure that Velocity breaks when anyone is using this
*###
#macro(isHidden $entryObj $isHidden)
  #stop
#end
##
##
##
#**
 * Displays several "tools" for manipulating blog posts: hide/show, publish, edit.
 * 
 * @param entryDoc The xdocument of the blog post. Each post resides in its own document.
 * @param entryObj The xobject of the blog post, an instance of the &lt;tt&gt;Blog.BlogPostClass&lt;/tt&gt; xclass.
 *###
#macro(displayEntryTools $entryDoc $entryObj)
  #if($context.action != 'preview')
    &lt;div class="blog-entry-toolbox"&gt;
    #displayPublishButton($entryDoc $entryObj)
    #displayHideShowButton($entryDoc $entryObj)
    #displayEditButton($entryDoc $entryObj)
    #displayDeleteButton($entryDoc $entryObj)
    &lt;/div&gt;
  #end
#end
##
##
##
#**
 * Displays the publish button to the entry &lt;strong&gt;creator&lt;/strong&gt;, if the article is not published yet.
 * 
 * @param entryDoc The xdocument of the blog post. Each post resides in its own document.
 * @param entryObj The xobject of the blog post, an instance of the &lt;tt&gt;Blog.BlogPostClass&lt;/tt&gt; xclass.
 * @todo AJAX calls.
 *###
#macro(displayPublishButton $entryDoc $entryObj)
  #set($isPublished=$xwiki.blog.isPublished($entryObj))
  #if(!$isPublished &amp;&amp; $entryDoc.creator == $context.user &amp;&amp; $xwiki.hasAccessLevel("edit", $context.user, $entryDoc.fullName))
    &lt;a href="$blogPublisher.getURL('view', "entryName=${util.encodeURI($entryDoc.fullName)}&amp;amp;xredirect=${util.encodeURI($thisURL)}")" title="$msg.get('xe.blog.code.notpublished')"&gt;#toolImage('publish.png' 'publish ')&lt;/a&gt;##
  #end
#end
##
##
##
#**
 * Displays the hide or show button to the entry &lt;strong&gt;creator&lt;/strong&gt;, if the article is already published.
 * 
 * @param entryDoc The xdocument of the blog post. Each post resides in its own document.
 * @param entryObj The xobject of the blog post, an instance of the &lt;tt&gt;Blog.BlogPostClass&lt;/tt&gt; xclass.
 *###
#macro(displayHideShowButton $entryDoc $entryObj)
  #set($isPublished=$xwiki.blog.isPublished($entryObj))
  #set($isHidden=$xwiki.blog.isHidden($entryObj))
  ## Only published articles can be hidden. Unpublished articles are considered already hidden.
  #if($isPublished &amp;&amp; $entryDoc.creator == $context.user &amp;&amp; $xwiki.hasAccessLevel('edit', $context.user, $entryDoc.fullName))
    #if ($isHidden)
      &lt;a class="blog-tool-show" href="$entryDoc.getURL('save', "${entryObj.getxWikiClass().getName()}_${entryObj.number}_hidden=0&amp;amp;comment=$msg.get('xe.blog.code.madevisible')&amp;amp;xredirect=${util.encodeURI($thisURL)}")" title="$msg.get('xe.blog.code.makevisible')"&gt;#toolImage('show.png', 'show ')&lt;/a&gt;##
    #else
      &lt;a class="blog-tool-hide" href="$entryDoc.getURL('save', "${entryObj.getxWikiClass().getName()}_${entryObj.number}_hidden=1&amp;amp;comment=$msg.get('xe.blog.code.hid')&amp;amp;xredirect=${util.encodeURI($thisURL)}")" title="$msg.get('xe.blog.code.hide')"&gt;#toolImage('hide.png' 'hide ')&lt;/a&gt;##
    #end
  #end
#end
##
##
##
#**
 * Displays the edit button to those that can edit the article.
 * 
 * @param entryDoc The xdocument of the blog post. Each post resides in its own document.
 * @param entryObj The xobject of the blog post, an instance of the &lt;tt&gt;Blog.BlogPostClass&lt;/tt&gt; xclass.
 *###
#macro(displayEditButton $entryDoc $entryObj)
  #if($xwiki.hasAccessLevel("edit", $context.user, $entryDoc.fullName))
    &lt;a href="$entryDoc.getURL('inline')" title="$msg.get('xe.blog.code.editpost')"&gt;#toolImage('edit.png' 'edit ')&lt;/a&gt;##
  #end
#end
##
##
##
#**
 * Displays the delete button to those that can edit the article.
 * 
 * @param entryDoc The xdocument of the blog post. Each post resides in its own document.
 * @param entryObj The xobject of the blog post, an instance of the &lt;tt&gt;Blog.BlogPostClass&lt;/tt&gt; xclass.
 * @todo AJAX calls.
 *###
#macro(displayDeleteButton $entryDoc $entryObj)
  #if($xwiki.hasAccessLevel("delete", $context.user, $entryDoc.fullName))
    &lt;a href="$entryDoc.getURL('delete')" title="$msg.get('xe.blog.code.deletepost')"&gt;#toolImage('delete.png' 'delete ')&lt;/a&gt;##
  #end
#end
##
##
##
#**
 * Displays the title of the entry.
 * 
 * @param entryDoc The xdocument of the blog post. Each post resides in its own document.
 * @param entryObj The xobject of the blog post, an instance of the &lt;tt&gt;Blog.BlogPostClass&lt;/tt&gt; xclass.
 *###
#macro(displayEntryTitle $entryDoc $entryObj)
  #if($doc.fullName == $entryDoc.fullName)
    &lt;h1 class="entry-title"&gt;$entryDoc.display('title', 'view', $entryObj)&lt;/h1&gt;
  #else
    &lt;h3 class="entry-title"&gt;&lt;a href="$entryDoc.getURL()"&gt;$entryDoc.display('title', 'view', $entryObj)&lt;/a&gt;&lt;/h3&gt;
  #end
#end
##
##
##
#**
 * Displays the body of the entry.
 * 
 * @param entryDoc The xdocument of the blog post. Each post resides in its own document.
 * @param entryObj The xobject of the blog post, an instance of the &lt;tt&gt;Blog.BlogPostClass&lt;/tt&gt; xclass.
 * @param onlyExtract If &lt;tt&gt;true&lt;/tt&gt;, try to display only a summary of the entry, instead of the full content.
 *###
#macro(displayEntryContent $entryDoc $entryObj $onlyExtract)
  &lt;div class="#if($onlyExtract)entry-summary#{else}entry-content#end"&gt;
  #getEntryContent($entryDoc $entryObj $onlyExtract $entryContent)
  ## $doc.display does not render non-1.0 syntaxes.
  #if($entryDoc.syntaxId == 'xwiki/1.0')
    $entryDoc.getRenderedContent($entryContent, $entryDoc.getSyntaxId())
  #else
    #if($entryDoc.syntaxId == 'xwiki/2.0')
      $entryContent
    #else
      $entryDoc.getRenderedContent($entryContent, $entryDoc.getSyntaxId())
    #end
  #end
  &lt;/div&gt; ## entry-content
#end
##
##
##
#**
 * Extracts the body of the entry that should be displayed. If &lt;tt&gt;onlyExtract&lt;/tt&gt; is &lt;tt&gt;true&lt;/tt&gt;, display the content
 * of the &lt;tt&gt;extract&lt;/tt&gt; field (if not empty).
 * 
 * @param entryDoc The xdocument of the blog post. Each post resides in its own document.
 * @param entryObj The xobject of the blog post, an instance of the &lt;tt&gt;Blog.BlogPostClass&lt;/tt&gt; xclass.
 * @param onlyExtract If &lt;tt&gt;true&lt;/tt&gt;, try to display only a summary of the entry, instead of the full content.
 * @param entryContent The resulting content.
 *###
#macro(getEntryContent $entryDoc $entryObj $onlyExtract $entryContent)
  #if($onlyExtract)
    #set($entryContent = $entryDoc.display('extract', 'view', $entryObj))
  #end
  #if("$!entryContent" == '')
    #set($entryContent = $entryDoc.display('content', 'view', $entryObj))
#* Disabled until the content can be cleanly cut.
*    #if($onlyExtract &amp;&amp; $content.length()&gt;$maxchars)
*      #set($i = $content.lastIndexOf(" ", $maxchars))
*      #set($i = $i + 1)
*      #set($content = "${content.substring(0,$i)} *[...&gt;${entryDoc.fullName}]*")
*    #end
## *###
  #else
    #set($entryContent = "${entryContent} &lt;a href='${entryDoc.getURL()}' title='$msg.get('xe.blog.code.readpost')'&gt;...&lt;/a&gt;")
  #end
#end
##
##
##
#**
 * Displays the footer of the entry.
 * 
 * @param entryDoc The xdocument of the blog post. Each post resides in its own document.
 * @param entryObj The xobject of the blog post, an instance of the &lt;tt&gt;Blog.BlogPostClass&lt;/tt&gt; xclass.
 *###
#macro(displayEntryFooter $entryDoc $entryObj)
  &lt;div class="entry-footer"&gt;
  #set($isPublished=$xwiki.blog.isPublished($entryObj))
  #if($isPublished)
    $msg.get('xe.blog.code.postedby') ##
  #else
    $msg.get('xe.blog.code.createdby') ##
  #end
  &lt;address class="author vcard"&gt;#userfn($entryDoc.creator)&lt;/address&gt; ##
  #listCategories($entryObj)##
  ~| &lt;a href="$entryDoc.getURL('view', '#Comments')"&gt;$entryDoc.comments.size() $msg.get('xe.blog.code.comments')&lt;/a&gt; ##
  ~| &lt;a href="$entryDoc.getURL('view')" rel="bookmark"&gt;$msg.get('xe.blog.code.permalink')&lt;/a&gt;
  &lt;/div&gt; ## entry-footer
#end
##
##
##
#**
 * List the categories an entry belongs to. Used in the footer. The categories are instances of &lt;tt&gt;Blog.CategoryClass&lt;/tt&gt;.
 * 
 * @param entryObj The xobject of the blog post, an instance of the &lt;tt&gt;Blog.BlogPostClass&lt;/tt&gt; xclass.
 *###
#macro(listCategories $entryObj)
  #if($entryObj.getxWikiClass().getName() == $blogPostClassname)
    #set($categories = $entryObj.getProperty('category').value)
    #set($first = true)
    #if($categories.size() &gt; 0)
      #foreach($category in $categories)
## Do not indent
#set($categoryDoc = $!xwiki.getDocument($category))
#if(!$categoryDoc.isNew() &amp;&amp; $categoryDoc.getObject(${blogCategoryClassname}))
#if($first)
 | $msg.get('xe.blog.code.categories')
#set($first = false)
#else, #end## if first
&lt;a rel="tag" href="$xwiki.getURL(${category})"&gt;$!xwiki.getDocument($category).getObject($blogCategoryClassname).getProperty('name').value&lt;/a&gt;##
#end## if isNew
#end## foreach
    #end
  #end
#end
##
##
##
#**
 * Displays blog pagination links (older and newer entries).
 * 
 * @param blogDoc the XDocument holding the blog definition object.
 *###
#macro(displayNavigationLinks $blogDoc)
  &lt;div class="clearfloats"&gt;&lt;/div&gt;
  #set($displayType=$xwiki.blog.getBlogDisplayType($blogDoc,$blogClassname))
  #if($displayType == 'weekly')
    &lt;div class="pagingLinks"&gt;
    #set($weekDate=$xwiki.blog.getRequestedWeek())
    $weekDate.addWeeks(-1)##
    &lt;span class="prevPage"&gt;**[[&amp;laquo; $msg.get('xe.blog.code.previousweek')&gt;&gt;$doc.name?year=$weekDate.weekyear&amp;amp;week=$weekDate.weekOfWeekyear]]**&lt;/span&gt;
    #sep()
    $weekDate.addWeeks(2)## 2 because we already subtracted 1 above
    &lt;span class=" nextPage"&gt;**[[$msg.get('xe.blog.code.nextweek') &amp;raquo;&gt;&gt;$doc.name?year=$weekDate.weekyear&amp;amp;week=$weekDate.weekOfWeekyear]]**&lt;/span&gt;
    &lt;/div&gt;
  #elseif($displayType == 'monthly')
    &lt;div class="pagingLinks"&gt;
    #set($monthDate=$xwiki.blog.getRequestedMonth())
    $monthDate.addMonths(-1)##
    &lt;span class="prevPage"&gt;**[[&amp;laquo; $msg.get('xe.blog.code.previousmonth')&gt;&gt;$doc.name?year=$monthDate.year&amp;amp;month=$monthDate.monthOfYear]]**&lt;/span&gt;
    #sep()
    $monthDate.addMonths(2)## 2 because we already subtracted 1 above
    &lt;span class=" nextPage"&gt;**[[$msg.get('xe.blog.code.nextmonth') &amp;raquo;&gt;&gt;$doc.name?year=$monthDate.year&amp;amp;month=$monthDate.monthOfYear]]**&lt;/span&gt;
    &lt;/div&gt;
  #elseif($displayType == 'all')
  #else
    ## Paginated
    #if(($totalPages &gt; 1))
      #set($queryString = "")
      #foreach($p in $request.getParameterNames())
        #if($p != 'page' &amp;&amp; $p != 'ipp')
          #foreach($v in $request.getParameterValues($p))
            #set($queryString = "${queryString}&amp;amp;${p}=${v}")
          #end
        #end
      #end
      &lt;div class="pagingLinks"&gt;
      #if ($currentPageNumber &lt; $totalPages)
        #set($currentPageNumber = $currentPageNumber + 1)
        #set($currentPageNumber = $currentPageNumber - 1)
        &lt;span class="prevPage"&gt;**[[&amp;laquo; $msg.get('xe.blog.code.olderposts')&gt;&gt;$doc.name?page=${currentPageNumber}&amp;amp;ipp=${itemsPerPage}$queryString]]**&lt;/span&gt;
      #end
      #if ($currentPageNumber &gt; 1)
        #if ($currentPageNumber &lt; $totalPages)
          #sep()
        #end
        #set($currentPageNumber = $currentPageNumber - 1)
        &lt;span class="nextPage"&gt;**[[$msg.get('xe.blog.code.newerposts') &amp;raquo;&gt;&gt;$doc.name?page=${currentPageNumber}&amp;amp;ipp=${itemsPerPage}$queryString]]**&lt;/span&gt;
        #set($currentPageNumber = $currentPageNumber + 1)
      #end
      &lt;span class="clear"&gt;&lt;/span&gt;
      &lt;/div&gt; ## pagingLinks
    #end
  #end
#end
##
##
##
#**
 * Displays a message box with "publish" icon.
 * 
 * @param message A text message concerning blog article publishing
 *###
#macro(publishMessageBox $message)
&lt;div class="plainmessage publish-message"&gt;$message&lt;/div&gt;
#end
#**
 * Displays a message box with "show/hide" icon.
 * 
 * @param message A text message concerning blog article hiding
 *###
#macro(hideMessageBox $message)
&lt;div class="plainmessage hide-message"&gt;$message&lt;/div&gt;
#end
##
##
##
#**
 * This method is only here to make sure that Velocity breaks when anyone is using this
*###
#macro(getRequestedWeek $weekDate)
  #stop
#end
##
##
##
#**
 * This method is only here to make sure that Velocity breaks when anyone is using this
*###
#macro(getRequestedMonth $monthDate)
  #stop
#end
##
##
##
#**
 * This method is only here to make sure that Velocity breaks when anyone is using this
*###
#macro(getBlogProperty $blogDoc $propertyName $defaultValue $propertyValue)
  #stop
#end
{{/html}}
{{/velocity}}</content>
</xwikidoc>
