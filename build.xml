<!--
 *
 * Copyright 2006, XpertNet SARL, and individual contributors as indicated
 * by the contributors.txt.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 *
-->

<project name="XWiki Content and Application Management Framework"
    default="release"
    basedir="." >


    <!-- Allow any user specific values to override the defaults -->
    <property file="${user.home}/build.properties" />
    <!-- Allow user defaults for this project -->
    <property file="build.properties" />

    <!-- This setting will be used if not overided by build.properties -->
    <property name="jdbc.filter" value="hsqldb_filters.properties" />

    <!-- The following line is used to read the version -->
    <property file="src/main/web/WEB-INF/xwiki.cfg" />

    <property name="app.name" value="xwiki" />
    <property name="pkg" value="com.xpn.xwiki" />

    <property name="src.dir" value="${basedir}/src/" />

    <property name="main.src.dir" value="${src.dir}/main/" />
    <property name="java.main.src.dir" value="${main.src.dir}/java/" />
    <property name="resources.main.src.dir" value="${main.src.dir}/resources/" />
    <property name="web.main.src.dir" value="${main.src.dir}/web" />

    <property name="test.src.dir" value="${src.dir}/test" />
    <property name="java.test.src.dir" value="${test.src.dir}/java" />
    <property name="resources.test.src.dir" value="${test.src.dir}/resources/" />
	<property name="cactus.test.src.dir" value="${test.src.dir}/cactus" />

    <property name="lib.dir" value="${basedir}/lib" />

    <property name="build.dir" value="${basedir}/build" />
    <property name="tests.build.dir" value="${build.dir}/test" />

    <property name="classes.dir" value="${build.dir}/classes" />
    <property name="release.dir" value="${basedir}/release" />
    <property name="dist.dir" value="${basedir}/dist" />

    <property name="test.reports.dir" value="${build.dir}/test-reports" />
    <property name="test.clover.dir" value="${build.dir}/test-clover" />

    <property name="doc.dir" value="${basedir}/doc" />
    <property name="javadoc.dir" value="${doc.dir}/api" />

    <property name="tests.filtersfile" value="${resources.test.src.dir}/${jdbc.filter}" />
    
    <!-- Standalone package properties -->
    <property name="standalone.base.dir" value="${basedir}/standalone"/>
    <property name="standalone.jetty.archive.dir" value="jetty-5.1.5"/>
    <property name="standalone.jetty.archive" value="${standalone.base.dir}/${standalone.jetty.archive.dir}.zip"/>
    <property name="standalone.package.name" value="xwikionjetty"/>
    <property name="standalone.release.dir" value="${release.dir}/${standalone.package.name}"/>
    
    <fileset id="standalone.db.bootstrap" dir="${standalone.base.dir}/db" includes="xwiki_db.*"/>
    <fileset id="standalone.config" dir="${standalone.base.dir}/config" includes="xwiki.cfg, hibernate.cfg.hsql.xml"/>
    <fileset id="standalone.scripts" dir="${standalone.base.dir}/scripts" includes="*"/>
    
    <fileset id="libs.xwiki.fileset" dir="${release.dir}" includes="xwiki.jar" />

    <fileset id="libs.hib.fileset" dir="${lib.dir}"
      includes="hibernate-3.0.3.jar" />

    <fileset id="libs.main.fileset" dir="${lib.dir}"
      includes="c3p0-0.8.4.5.jar,cglib-2.1.jar,dom4j-1.6.jar,ehcache-1.1.jar,hibernate-tools-2.1.3.jar,mysql-connector-java-3.1.7-bin.jar,hsqldb-1.7.3.jar,odmg-3.0.jar,oscache-2.0.2.jar,jgroups-2.2.5.jar,swarmcache.jar,xalan-2.6.0.jar,xerces-2.4.0.jar,xml-apis-2.0.2.jar,jta.jar,antlr-2.7.5.jar,asm-1.5.3.jar,asm-util-1.5.3.jar,
     	commons-beanutils-1.7.0.jar,commons-codec-1.3.jar,commons-collections-3.1.jar,commons-dbcp-1.2.1.jar,commons-digester-1.6.jar,commons-fileupload-1.0.jar,commons-lang-2.1.jar,commons-logging-1.0.4.jar,commons-pool-1.1.jar,commons-net-1.1.0.jar,commons-httpclient-2.0.2.jar,ecs-1.4.2.jar,oro-2.0.8.jar,log4j-1.2.8.jar,
     	org.apache.commons.jrcs.rcs.jar,
     	struts-1.2.4.jar,
     	velocity-1.4.jar,velocity-tools-1.1.jar,
     	securityfilter-2.0.jar,
     	radeox.jar,
     	portlet.jar,
     	xmlrpc-1.2.jar,
     	groovy-all-1.0-jsr-04.jar,
     	xalan-2.6.0.jar,xerces.jar-2.4.0,xml-apis-2.0.2,jimi.jar,avalon-framework-4.1.5.jar,fop-0.20.5.jar,jtidy.jar,
    	batik-all-1.6.jar,
    	ldap.jar,
     	rome-0.7.jar,rome-fetcher-0.7.jar,jdom-1.0.jar,
     	axis-1.2RC2.jar,jaxrpc-1.1.jar,saaj-1.2.jar,wsdl4j-1.5.jar,commons-discovery-0.2.jar,googleapi.jar,googleadwords.jar,alexa.jar,terraservice.jar,ipresolver.jar,flipper.jar,
     	mail-1.3.2.jar,ical4j-0.9.12.jar,flickrapi-1.0a7.jar,
		jackrabbit-1.0-SNAPSHOT.jar,jackrabbit-api-1.0-SNAPSHOT.jar,jackrabbit-commons-1.0-SNAPSHOT.jar,jackrabbit-core-1.0-SNAPSHOT.jar,jcr-1.0.jar,
		org.apache.commons.jrcs.diff.jar,
        ant-1.6.2.jar,
        jfreechart-1.0.0-rc1.jar,
        jcommon-1.0.0-rc1.jar"
        />

    <fileset id="libs.servlet.fileset" dir="${lib.dir}"
        includes="servlet-api-2.4.jar" />

     <fileset id="libs.exo.fileset" dir="${lib.dir}"
	includes="picocontainer-1.0.jar,exo-platform.commons.jar,exo-platform.container-2.0.jar,exo-platform.service.chart.api-2.0.jar,exo-platform.service.chart.impl-2.0.jar,exo-platform.service.common.api-2.0.jar,exo-platform.service.database.api-2.0.jar,exo-platform.service.database.impl-2.0.jar,exo-platform.service.organization.api-2.0.jar,exo-platform.service.organization.impl-2.0.jar,exo-platform.service.sercurity.api-2.0.jar,exo-platform.service.sercurity.impl-2.0.jar" />
 
     <fileset id="libs.tests.fileset" dir="${lib.dir}"
         includes="cactus-1.7.jar,cactus-ant-1.7.jar,aspectjrt-1.2.1.jar,httpunit-1.6.jar,junit-3.8.1.jar,nekohtml-0.9.1.jar,clover-1.3.9.jar,jmock-1.0.1.jar,jmock-cglib-1.0.1.jar,org.mortbay.jetty-5.1.3.jar" />


    <fileset id="libs.tests.fileset" dir="${lib.dir}"
        includes="cactus-1.7.jar,cactus-ant-1.7.jar,aspectjrt-1.2.1.jar,httpunit-1.6.jar,junit-3.8.1.jar,nekohtml-0.9.1.jar,clover-1.3.9.jar,jmock-1.0.1.jar,jmock-cglib-1.0.1.jar,org.mortbay.jetty-5.1.3.jar" />

    <pathconvert pathsep=";" property="libs.main" refid="libs.main.fileset" />
    <pathconvert pathsep=";" property="libs.hib" refid="libs.hib.fileset" />
    <pathconvert pathsep=";" property="libs.exo" refid="libs.exo.fileset" />
    <pathconvert pathsep=";" property="libs.servlet" refid="libs.servlet.fileset" />
    <pathconvert pathsep=";" property="libs.tests" refid="libs.tests.fileset"/>

    <property name="libs" value="${libs.main};${libs.hib};${libs.exo};${libs.servlet}" />

    <property name="clover.initstring" location="${test.clover.dir}/clover"/>
    <available property="junit.available" classname="junit.framework.TestCase"/>
    <available property="clover.available" classname="org.apache.tools.ant.taskdefs.CloverCompilerAdapter" />

    <target name="junit-check" depends="prepare" unless="junit.available">
        <fail message="Cannot run test cases. Please copy lib/build/junit-3.8.1.jar to ${ant.home}/lib"/>
    </target>

    <target name="clover-check" depends="prepare" unless="clover.available">
        <fail message="Cannot run coverage tests. Please copy lib/build/clover-1.3.6.jar to ${ant.home}/lib"/>
    </target>

    <target name="clover-yes" depends="prepare" if="clover.available">
        <property name="compiler" value="org.apache.tools.ant.taskdefs.CloverCompilerAdapter"/>
        <mkdir dir="${test.clover.dir}" />
    </target>

    <target name="clover-no" depends="prepare" unless="clover.available">
        <property name="compiler" value="modern"/>
    </target>

    <!-- Define the Cactus tasks -->
<!--
    <taskdef resource="cactus.tasks">
        <classpath>
            <pathelement location="${lib.dir}/junit-3.8.1.jar"/>
            <pathelement location="${lib.dir}/cactus-1.7.jar"/>
            <pathelement location="${lib.dir}/cactus-ant-1.7.jar"/>
            <pathelement location="${lib.dir}/commons-httpclient-2.0.2.jar"/>
            <pathelement location="${lib.dir}/commons-logging-1.0.4.jar"/>
            <pathelement location="${lib.dir}/aspectjrt-1.2.1.jar"/>
        </classpath>
    </taskdef>
-->

    <target name="prepare">
        <propertyfile file="src/main/web/WEB-INF/version.properties" >
            <entry key="build.number" type="int" value="1" operation="+" pattern="0000" />
        </propertyfile>
        <property file="src/main/web/WEB-INF/version.properties" />
        <property name="version" value="${xwiki.version}.${build.number}" />
        <property name="release.warfile" value="${release.dir}/xwiki-${version}.war" />
        <property name="test.warfile" value="${release.dir}/xwiki.war" />
        <property name="exo.warfile" value="${release.dir}/xwiki-exo-${version}.war" />
        <property name="cactus.warfile" value="${release.dir}/xwiki.war" />
        <mkdir dir="${build.dir}" />
        <mkdir dir="${tests.build.dir}" />
        <mkdir dir="${classes.dir}" />
        <mkdir dir="${release.dir}" />
    </target>

    <target name="clean">
        <delete dir="${javadoc.dir}" />
        <delete dir="${doc.dir}/junit" />
        <delete dir="${doc.dir}/clover" />
        <delete dir="${build.dir}" />
        <delete dir="${release.dir}" />
        <delete dir="${dist.dir}" />
    </target>

    <patternset id="non.java.sources">
        <include name="**/*.properties" />
        <include name="**/*.xml" />
        <include name="**/*.xsl" />
        <include name="**/*.dtd" />
        <include name="**/*.ent" />
        <include name="**/*.tld" />
        <include name="**/*.vm" />
        <include name="**/*.cfg" />
        <include name="**/*.txt" />
        <include name="META-INF/services/com.*" />
    </patternset>

    <patternset id="test.classes">
        <include name="**/test/*.class" />
    </patternset>

    <target name="xwiki.nonjava" depends="prepare">
        <copy todir="${classes.dir}">
            <fileset dir="${resources.main.src.dir}"/>
        </copy>

        <copy todir="${build.dir}/web">
            <fileset includes="**"
                dir="${web.main.src.dir}" />
        </copy>

        <copy todir="${build.dir}/web/WEB-INF">
            <fileset includes="license.txt"
                dir="${basedir}" />
            <fileset includes="lgpl.txt"
                dir="${basedir}/" />
        </copy>

        <copy todir="${build.dir}/web/WEB-INF/classes">
            <fileset dir="${build.dir}/web/WEB-INF">
                <include name="hibernate.cfg.xml" />
            </fileset>
        </copy>

    </target>

    <target name="xwiki" depends="clover-yes, clover-no, xwiki.nonjava">
        <javac srcdir="${java.main.src.dir}"
            destdir="${classes.dir}"
            classpath="${libs}"
            debug="on" optimize="on" deprecation="on"
            compiler="${compiler}" source="1.4"
            sourcepath=""
            encoding="ISO-8859-1"/>
    </target>

	<target name="jar" depends="xwiki" description="Packages xwiki as a jar">
		<jar destfile="${release.dir}/xwiki.jar">
			<!--  classes -->
		    <fileset dir="${classes.dir}">
		        <include name="**/*.class"/>
		    </fileset>
		    <!-- resources -->
		    <fileset dir="${resources.main.src.dir}">
		        <include name="**/*"/>
		    </fileset>
		</jar>
	</target>

    <target name="prepare-tests">
    	<copy todir="${tests.build.dir}">
            <fileset dir="${resources.test.src.dir}"/>
        </copy>
        <filter filtersfile="${tests.filtersfile}"/>
        <copy file="${resources.test.src.dir}/hibernate-test-template.cfg.xml"
            tofile="${tests.build.dir}/hibernate-test.cfg.xml"
            filtering="true" overwrite="true" />
        <copy file="${tests.build.dir}/hibernate-test.cfg.xml"
            tofile="${tests.build.dir}/hibernate.cfg.xml"
            overwrite="true" />
    </target>

    <target name="tests" depends="junit-check,prepare,xwiki,prepare-tests">
        <javac destdir="${tests.build.dir}"
            classpath="${libs};${libs.tests};${tests.build.dir};${classes.dir}"
            debug="on" optimize="on" deprecation="on" source="1.4"
            sourcepath=""
            encoding="ISO-8859-1" >
        	<src path="${java.test.src.dir}" />
        	<src path="${cactus.test.src.dir}" />
        </javac>
    </target>

    <target name="test.client" depends="xwiki, tests">
        <mkdir dir="${test.reports.dir}" />

    	<!-- TODO: Remove the dir attibute which should not be needed if all tests get
    	     their resources from the classpath -->
        <junit printsummary="yes" dir="${tests.build.dir}" haltonfailure="no" fork="on">

            <classpath>
                <pathelement path="${tests.build.dir}" />
                <pathelement path="${classes.dir}" />
                <pathelement path="${libs}" />
                <pathelement path="${libs.tests}" />
            </classpath>
            <formatter type="xml" />

            <batchtest todir="${test.reports.dir}">
            	<fileset dir="${java.test.src.dir}">
            		<include name="**/*Test.java"/>
                    <exclude name="**/Abstract*.java"/>
                    <!-- Excluded because hibernate store is the one used -->
                    <exclude name="**/StoreRCSFileTest.java"/>
                    <exclude name="**/StoreObjectRCSFileTest.java"/>
                    <!-- Excluded because Rename is not yet ready -->
                    <exclude name="**/RenamePageTest.java"/>
                    <!-- Excluded because LDAP setup is needed -->
                    <exclude name="**/LDAPTest.java"/>
                    <!-- Excluded because there are not tests -->
                    <exclude name="**/XWikiHelperTest.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="test.server.prepare" depends="release,prepare-tests">
      <!-- Cactify the web-app archive -->
      <copy file="${resources.test.src.dir}/xwiki.cfg" 
		tofile="${build.dir}/web/WEB-INF/xwiki.cfg" overwrite="true" />
      <copy file="${resources.test.src.dir}/hibernate-test.cfg.xml" 
		tofile="${build.dir}/web/WEB-INF/hibernate-test.cfg.xml" overwrite="true" />
      <war warfile="${test.warfile}" basedir="${build.dir}/web" 
		webxml="${main.src.dir}/web-test.xml" >
        <classes dir="${tests.build.dir}"/>
        <exclude name="**/web*.xml" />
        <exclude name="**/xwiki-*.cfg" />
        <exclude name="**/hibernate.cfg.xml" />
        <lib refid="libs.main.fileset" />
        <lib refid="libs.hib.fileset" />
        <lib refid="libs.xwiki.fileset" />
        <lib refid="libs.tests.fileset" />
        <lib refid="libs.exo.fileset" />
      </war>
    </target>

    <target name="test.server" depends="tests, test.server.prepare">

        <mkdir dir="${test.reports.dir}" />
        <cactus printsummary="yes" warfile="${cactus.warfile}" dir="${tests.build.dir}"
            haltonfailure="no" fork="on"  maxmemory="256m" >

            <classpath>
                <pathelement path="${tests.build.dir}" />
                <pathelement path="${classes.dir}" />
                <pathelement path="${libs}" />
                <pathelement path="${libs.tests}" />
            </classpath>
            <formatter type="xml" />

            <batchtest todir="${test.reports.dir}" >
                <fileset dir="${cactus.test.src.dir}">
                    <include name="**/*Test.java"/>
                    <exclude name="**/AllTests.java"/>
                    <exclude name="**/AllServletTests.java"/>
                    <exclude name="**/ServletTest.java"/>
                    <exclude name="**/XWikiIntegrationTest.java"/>
                    <exclude name="**/atom/**" />
                </fileset>
            </batchtest>

            <containerset>
              <tomcat4x if="tomcat4x.home" dir="${tomcat4x.home}" serverxml="${resources.test.src.dir}/server.xml"
                  port="18080" todir="${test.reports.dir}" jvmArgs="-Xmx300m -Dfile.encoding=iso-8859-1 -Djava.awt.headless=true"/>
              <tomcat5x if="tomcat5x.home" dir="${tomcat5x.home}" serverxml="${resources.test.src.dir}/server.xml"
                  port="18080" todir="${test.reports.dir}" jvmArgs="-Xmx300m -Dfile.encoding=iso-8859-1 -Djava.awt.headless=true"/>
            </containerset>
        </cactus>
        <delete file="${cactus.warfile}" />
    </target>

    <target name="test" depends="test.client" />
    <target name="test.clover" depends="clover-check, test.client" />

    <target name="clover.report" depends=""  if="clover.available">
        <mkdir dir="${doc.dir}/clover" />
        <java classname="com.cortexeb.tools.clover.reporters.html.HtmlReporter" fork="true">
            <arg line="--outputdir ${doc.dir}/clover --showSrc --initstring ${clover.initstring} --title '${app.name}'"/>
            <classpath>
                <pathelement path="${classes.dir}" />
                <pathelement path="${libs}" />
            </classpath>
        </java>
    </target>

    <target name="junit.report" depends="">
        <mkdir dir="${doc.dir}/junit" />
        <junitreport todir="${doc.dir}/junit">
            <fileset dir="${test.reports.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${doc.dir}/junit"/>
        </junitreport>
    </target>

    <target name="javadoc" depends="xwiki">
        <mkdir dir="${javadoc.dir}" />
        <javadoc packagenames="com.xpn.xwiki.*"
            sourcepath="${java.main.src.dir}"
            destdir="${javadoc.dir}"
            classpath="${libs}"
            author="true"
            version="true"
            private="yes"
            windowtitle="${app.name} API"
            doctitle="${app.name}"
            bottom="Copyright 2003 Ludovic Dubost"
            >
        </javadoc>
    </target>

    <target name="doc" depends="javadoc, junit.report, clover.report" />

    <target name="webapp" depends="jar">
      <mkdir dir="${release.dir}/web" />
      <copy todir="${release.dir}/web">
	<fileset dir="${build.dir}/web">
         <exclude name="**/web-*.xml" />
         <exclude name="**/xwiki-*.cfg" />
         <exclude name="**/hibernate-test.cfg.xml" />
         <exclude name="**/hibernate.cfg.*.xml" />
	</fileset>
      </copy>
      <copy todir="${release.dir}/web/WEB-INF/lib">
        <fileset refid="libs.main.fileset" />
        <fileset refid="libs.hib.fileset" />
        <fileset refid="libs.exo.fileset" />
        <fileset refid="libs.xwiki.fileset" />
	</copy>
      <copy tofile="${release.dir}/web/WEB-INF/web.xml" overwrite="true"
		file="${main.src.dir}/web.xml" />
    </target>

    <target name="release" depends="jar">
      <mkdir dir="${release.dir}" />
      <war warfile="${release.warfile}" basedir="${build.dir}/web" webxml="${main.src.dir}/web.xml" >
        <exclude name="**/web*.xml" />
        <exclude name="**/xwiki-*.cfg" />
        <lib refid="libs.main.fileset" />
        <lib refid="libs.hib.fileset" />
        <lib refid="libs.exo.fileset" />
        <lib refid="libs.xwiki.fileset" />
      </war>
      <copy file="${build.dir}/web/WEB-INF/xwiki.cfg" tofile="${build.dir}/web/WEB-INF/xwiki-normal.cfg" overwrite="true" />
      <copy file="${build.dir}/web/WEB-INF/xwiki-exo.cfg" tofile="${build.dir}/web/WEB-INF/xwiki.cfg" overwrite="true" />
      <war warfile="${exo.warfile}" basedir="${build.dir}/web" webxml="${main.src.dir}/web-exo.xml" >
        <exclude name="**/web*.xml" />
        <exclude name="**/xwiki-*.cfg" />
          <lib refid="libs.main.fileset" />
          <lib refid="libs.xwiki.fileset" />
      </war>
      <copy file="${build.dir}/web/WEB-INF/xwiki-normal.cfg" tofile="${build.dir}/web/WEB-INF/xwiki.cfg" overwrite="true" />
    </target>

    <target name="bin.dist" depends="release, test, javadoc">
        <mkdir dir="${dist.dir}" />
        <property name="bin.tarfile" value="${dist.dir}/xwiki-${version}.tar.gz" />
        <delete file="${bin.tarfile}" />

        <tar compression="gzip" tarfile="${bin.tarfile}">
            <tarfileset dir="${release.dir}" prefix="release" excludes="**/CVS/*"  />
            <tarfileset dir="${lib.dir}" prefix="lib" excludes="**/CVS/*" />
            <tarfileset dir="${doc.dir}" prefix="doc" excludes="**/CVS/*" />
            <tarfileset dir="${basedir}" includes="license.txt,lgpl.txt" />
        </tar>
    </target>

    <target name="src.dist" depends="release, test, javadoc">
        <mkdir dir="${dist.dir}" />
        <property name="src.tarfile" value="${dist.dir}/xwiki-${version}-src.tar.gz" />
        <delete file="${src.tarfile}" />

        <tar compression="gzip" tarfile="${src.tarfile}">
            <tarfileset dir="${lib.dir}" prefix="lib" />
            <tarfileset dir="${doc.dir}" prefix="doc" />
            <tarfileset dir="${src.dir}" prefix="src" />
            <tarfileset dir="${basedir}" includes="*.properties,*.xml,*.iml,*.ipr,*.iws" />
            <tarfileset dir="${basedir}" includes="license.txt,lgpl.txt" />
        </tar>
    </target>
    
    <target name="standalone" depends="release">
    	<!-- unzip jetty archive into standalone release dir -->
	<!-- exclude some jetty provided jar files in order to avoid clashes -->
	<!-- these jars are provided by xwiki -->    	

    	<unzip src="${standalone.jetty.archive}" dest="${release.dir}">
    		<patternset>
    			<exclude name="**/ext/xercesImpl.jar"/>
    			<exclude name="**/ext/xml-apis.jar"/>
    			<exclude name="**/ext/xmlParserAPIs-2.5.jar"/>
    		</patternset>
    	</unzip>
    	<move todir="${standalone.release.dir}">
	    <fileset dir="${release.dir}/${standalone.jetty.archive.dir}"/>
  	</move>
    	
    	<!-- remove example webapps -->
    	<delete file="${standalone.release.dir}/webapps/javadoc.war"/>
    	<delete dir="${standalone.release.dir}/webapps/template"/>
    
    	<!-- explode xwiki war file into jetty/webapps -->
    	<mkdir dir="${standalone.release.dir}/webapps/xwiki"/>
    	<unwar src="${release.warfile}" dest="${standalone.release.dir}/webapps/xwiki"/>
    	
    	<!-- replace configuration files with standalone version -->
    	<copy todir="${standalone.release.dir}/webapps/xwiki/WEB-INF" overwrite="true">
    		<fileset refid="standalone.config"/>
    	</copy>
    	
    	<!-- install db bootstrap -->
    	<mkdir dir="${standalone.release.dir}/db"/>
    	<copy todir="${standalone.release.dir}/db">
	        <fileset refid="standalone.db.bootstrap" />
	</copy>
	
	<!-- install start/stop scripts -->
	<copy todir="${standalone.release.dir}">
		<fileset refid="standalone.scripts"/>
	</copy>
    </target>

    <target name="all"  depends="release, test, doc, src.dist" />

</project>
