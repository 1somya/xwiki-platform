<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
<web>Sandbox</web>
<name>TestTopic1</name>
<language></language>
<defaultLanguage>en</defaultLanguage>
<translation>0</translation>
<parent></parent>
<creator>XWiki.Admin</creator>
<author>XWiki.Admin</author>
<contentAuthor>XWiki.Admin</contentAuthor>
<creationDate>1154175385000</creationDate>
<date>1155306086000</date>
<contentUpdateDate>1155306086000</contentUpdateDate>
<version>1.23</version>
<title></title>
<template></template>
<attachment>
<filename>with spaces .jpg</filename>
<filesize>8742</filesize>
<author>XWiki.Admin</author>
<date>1155305950000</date>
<version>1.1</version>
<comment></comment>
<content></content>
</attachment>
<attachment>
<filename>with spaces.zip</filename>
<filesize>58275</filesize>
<author>XWiki.Admin</author>
<date>1155306086000</date>
<version>1.1</version>
<comment></comment>
<content></content>
</attachment>
<object>
<class>
<name>XWiki.XWikiComments</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<author>
<name>author</name>
<prettyName>Author</prettyName>
<unmodifiable>0</unmodifiable>
<size>30</size>
<number>1</number>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</author>
<highlight>
<name>highlight</name>
<prettyName>Highlighted Text</prettyName>
<unmodifiable>0</unmodifiable>
<size>40</size>
<rows>2</rows>
<number>2</number>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</highlight>
<date>
<name>date</name>
<prettyName>Date</prettyName>
<unmodifiable>0</unmodifiable>
<size>20</size>
<dateFormat>dd/MM/yyyy HH:mm:ss</dateFormat>
<emptyIsToday>1</emptyIsToday>
<number>3</number>
<classType>com.xpn.xwiki.objects.classes.DateClass</classType>
</date>
<comment>
<name>comment</name>
<prettyName>Comment</prettyName>
<unmodifiable>0</unmodifiable>
<size>40</size>
<rows>5</rows>
<number>4</number>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</comment>
<replyto>
<name>replyto</name>
<prettyName>Reply To</prettyName>
<unmodifiable>0</unmodifiable>
<size>5</size>
<numberType>integer</numberType>
<number>5</number>
<classType>com.xpn.xwiki.objects.classes.NumberClass</classType>
</replyto>
</class>
<name>Sandbox.TestTopic1</name>
<number>0</number>
<className>XWiki.XWikiComments</className>
<property>
<comment>commmmeenttttt
hafhfhfhh</comment>
</property>
<property>
<date>2006-08-02 12:23:44.0</date>
</property>
<property>
<author>XWiki.XWikiGuest</author>
</property>
</object>
<content>[&amp;#355;&amp;#259;ru&amp;#351;|http://www.&amp;#355;&amp;#259;ru&amp;#351;.ro]</content>
</xwikidoc>
