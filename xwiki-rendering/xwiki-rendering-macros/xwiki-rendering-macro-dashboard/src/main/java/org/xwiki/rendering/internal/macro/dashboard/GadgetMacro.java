/*
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
package org.xwiki.rendering.internal.macro.dashboard;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.xwiki.component.annotation.Component;
import org.xwiki.component.manager.ComponentLookupException;
import org.xwiki.component.manager.ComponentManager;
import org.xwiki.rendering.block.Block;
import org.xwiki.rendering.block.GroupBlock;
import org.xwiki.rendering.block.HeaderBlock;
import org.xwiki.rendering.block.MacroBlock;
import org.xwiki.rendering.internal.macro.MacroContentParser;
import org.xwiki.rendering.listener.HeaderLevel;
import org.xwiki.rendering.macro.Macro;
import org.xwiki.rendering.macro.MacroExecutionException;
import org.xwiki.rendering.macro.MacroId;
import org.xwiki.rendering.macro.MacroManager;
import org.xwiki.rendering.macro.container.AbstractContainerMacro;
import org.xwiki.rendering.macro.container.ContainerMacroParameters;
import org.xwiki.rendering.transformation.MacroTransformationContext;

/**
 * Gadget box macro, to wrap a gadget macro inside. This macro should not be available to users, it is used for internal
 * purposes, to wrap a macro block in a box, with title and all.
 * 
 * @version $Id$
 */
@Component("gadgetcontainer")
class GadgetMacro extends AbstractContainerMacro<ContainerMacroParameters>
{
    /**
     * The HTML class attribute name.
     */
    private static final String CLASS = "class";

    /**
     * The component manager, injected to this macro by the caller, since this macro cannot be exposed to the cm because
     * we don't want it available in the macros list. <br />
     * FIXME: when we will be able to hide macros from the user, this should be implemented properly as a component.
     */
    private ComponentManager componentManager;

    /**
     * The macro block of the gadget macro inside the dashboard, will be used as the content of this box.
     */
    private MacroBlock gadgetMacroBlock;

    /**
     * Create and initialize the descriptor of the macro.
     * 
     * @param content the macro block to generate the content of the container from. Parameters and content passed to
     *            the execute function will be ignored.
     * @param componentManager the component manager, injected to this macro by the caller, since this macro cannot be
     *            exposed to the cm to get its requirement through it because we don't want it available in the macros
     *            list
     */
    public GadgetMacro(MacroBlock content, ComponentManager componentManager)
    {
        super("Gadget", "Draws a box around a gadget.", ContainerMacroParameters.class);
        this.gadgetMacroBlock = content;
        this.componentManager = componentManager;
    }

    /**
     * {@inheritDoc}
     * 
     * @see org.xwiki.rendering.macro.box.AbstractBoxMacro#execute(org.xwiki.rendering.macro.box.BoxMacroParameters,
     *      java.lang.String, org.xwiki.rendering.transformation.MacroTransformationContext)
     */
    @Override
    public List<Block> execute(ContainerMacroParameters parameters, String content, MacroTransformationContext context)
        throws MacroExecutionException
    {
        // Prepare the container macro parameters, by setting the title and the css class
        ContainerMacroParameters gadgetParams = new ContainerMacroParameters();
        gadgetParams.setCssClass("gadget");
        // Execute the container macro with these params, the content of the container will be generated by getContainer
        return super.execute(gadgetParams, content, context);
    }

    /**
     * {@inheritDoc}
     * 
     * @see org.xwiki.rendering.macro.container.AbstractContainerMacro
     *      #getContent(org.xwiki.rendering.macro.container.ContainerMacroParameters, java.lang.String,
     *      org.xwiki.rendering.transformation.MacroTransformationContext)
     */
    @Override
    protected List<Block> getContent(ContainerMacroParameters parameters, String content,
        MacroTransformationContext context) throws MacroExecutionException
    {
        List<Block> contentBlocks = new ArrayList<Block>();

        // Put the title of the gadget in
        contentBlocks.addAll(getGadgetTitle(this.gadgetMacroBlock, context));
        // And then the macro wrapped in a group block with class, to style it
        GroupBlock boxContentGroup = new GroupBlock();
        boxContentGroup.setParameter(CLASS, "gadget-content");
        boxContentGroup.addChild(gadgetMacroBlock);
        contentBlocks.add(boxContentGroup);
        return contentBlocks;
    }

    /**
     * Builds the title of the gadget, from the name of the gadget macro, and returns it as a list of blocks.
     * 
     * @param gadgetMacroBlock the macro block of the gadget
     * @param context the macro transformation context
     * @return the string title that the gadget should have (the name of the gadget macro)
     */
    private List<Block> getGadgetTitle(MacroBlock gadgetMacroBlock, MacroTransformationContext context)
    {
        List<Block> titleBlocks = Collections.<Block> emptyList();
        try {
            String title = "";
            MacroId macroIdObject = new MacroId(gadgetMacroBlock.getId());
            Macro< ? > macro = getMacroManager().getMacro(macroIdObject);
            // TODO: translate me
            title = macro.getDescriptor().getName();

            titleBlocks = getContentParser().parse(title, context, false, true);
            // and wrap everything in a header block with css class for title.
        } catch (Exception e) {
            getLogger().warn("Could not create gadget title for macro: " + gadgetMacroBlock.getId());
        }
        HeaderBlock wrapperBlock = new HeaderBlock(titleBlocks, HeaderLevel.LEVEL2);
        wrapperBlock.setParameter(CLASS, "gadget-title");
        return Collections.<Block> singletonList(wrapperBlock);
    }

    /**
     * @return the content parser of this box macro, to parse the title of the macro.
     * @throws ComponentLookupException if the default implementation of the {@link MacroContentParser} is not found
     */
    MacroContentParser getContentParser() throws ComponentLookupException
    {
        return getComponentManager().lookup(MacroContentParser.class);
    }

    /**
     * @return the macro manager, used by this macro to generate the title of the gadget.
     * @throws ComponentLookupException if the default implementation of the {@link MacroManager} is not found
     */
    MacroManager getMacroManager() throws ComponentLookupException
    {
        return getComponentManager().lookup(MacroManager.class);
    }

    /**
     * {@inheritDoc}. Override to provide the injected component manager instead.
     * 
     * @see org.xwiki.rendering.macro.container.AbstractContainerMacro#getComponentManager()
     */
    @Override
    protected ComponentManager getComponentManager()
    {
        return this.componentManager;
    }
}
