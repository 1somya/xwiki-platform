/*
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
package org.xwiki.rendering.listener;

import java.util.Map;

/**
 * Contains callback events called when a document has been parsed and when it needs to be modified or rendered. More
 * specifically when a document is parsed it generates an {@link org.xwiki.rendering.block.XDOM} object. That object
 * has a {@link org.xwiki.rendering.block.XDOM#traverse(Listener)} method that accepts a {@link Listener} object.
* For each {@link org.xwiki.rendering.block.Block} element found in the document its
 * {@link org.xwiki.rendering.block.Block#traverse} method is called leading to the generation of events from this
 * interface.
 * <p>Here's an example of usage:</p>
 * <pre><code>
 *   XDOM dom = parser.parse(source);
 *   MyListener listener = new MyListener(...);
 *   dom.traverse(listener);
 *   // At this stage all events have been sent to MyListener. 
 * </code></pre>
 *
 * @version $Id$
 * @since 1.5M2
 */
public interface Listener
{
    /**
     * Start of the document.
     */
    void beginDocument();

    /**
     * End of the document.
     */
    void endDocument();

    /**
     * End of a text formatting block.
     *
     * @param format the formatting type (bold, italic, etc)
     * @see Format
     */
    void beginFormat(Format format);

    /**
     * End of a text formatting block.
     * 
     * @param format the formatting type (bold, italic, etc)
     * @see Format
     */
    void endFormat(Format format);

    /**
     * Start of a paragraph.
     */
    void beginParagraph(Map<String, String> parameters);

    /**
     * End of a paragraph.
     */
    void endParagraph(Map<String, String> parameters);

    /**
     * Start of a list.
     *
     * @param listType the type of list (bulleted, numbered, etc)
     * @see ListType
     */
    void beginList(ListType listType);

    /**
     * Start of a definition list. For example in HTML this is the equivalent of &lt;dl&gt;.
     * @since 1.6M2
     */
    void beginDefinitionList();

    /**
     * End of a list.
     *
     * @param listType the type of list (bulleted, numbered, etc)
     * @see ListType
     */
    void endList(ListType listType);

    /**
     * End of a definition list. For example in HTML this is the equivalent of &lt;/dl&gt;.
     * @since 1.6M2
     */
    void endDefinitionList();
    
    /**
     * Start of a list item.
     */
    void beginListItem();

    /**
     * Start of a definition list term. For example in HTML this is the equivalent of &lt;dt&gt;.
     * @since 1.6M2
     */
    void beginDefinitionTerm();

    /**
     * Start of a definition list description. For example in HTML this is the equivalent of &lt;dd&gt;.
     * @since 1.6M2
     */
    void beginDefinitionDescription();

    /**
     * End of a list item.
     */
    void endListItem();

    /**
     * End of a definition list term. For example in HTML this is the equivalent of &lt;/dt&gt;.
     * @since 1.6M2
     */
    void endDefinitionTerm();

    /**
     * End of a definition list description. For example in HTML this is the equivalent of &lt;/dd&gt;.
     * @since 1.6M2
     */
    void endDefinitionDescription();
    
    /**
     * Start of a section.
     *
     * @param level the section level (1, 2, 3, etc).
     * @see org.xwiki.rendering.listener.SectionLevel
     */
    void beginSection(SectionLevel level);

    /**
     * End of a section.
     *
     * @param level the section level (1, 2, 3, etc).
     * @see org.xwiki.rendering.listener.SectionLevel
     */
    void endSection(SectionLevel level);

    /**
     * Start of an XML tag. We use this type of event whenever there's no other equivalent event. For example for
     * a bold element we would use the {@link #beginFormat(Format)} instead of this event. However for example for
     * an HTML FORM there's no equivalent event. Note that these events are usually generated by a macro such as
     * the HTML or XHTML macros.
     *
     * @param name the XML element tag name
     * @param attributes the XML element attributes (if any)
     */
    void beginXMLElement(String name, Map<String, String> attributes);

    /**
     * End of an XML tag.
     *
     * @param name the XML element tag name
     * @param attributes the XML element attributes (if any)
     * @see #beginXMLElement(String, java.util.Map) 
     */
    void endXMLElement(String name, Map<String, String> attributes);

    /**
     * Start of marker containing a macro definition. This is a special that Macro Blocks emits when they are
     * executed so that it's possible to reconstruct the initial macro syntax even after Macros have been executed.
     * This is used for exemple by the WYSIWYG editor to let use see the result of executing a macro and still let
     * them modify the macro definition.
     *
     * @param name the macro name
     * @param parameters the macro parameters
     * @param content the macro content
     * @see #onStandaloneMacro(String, java.util.Map, String)
     * @see #onInlineMacro(String, java.util.Map, String)
     */
    void beginMacroMarker(String name, Map<String, String> parameters, String content);

    /**
     * End of marker containing a macro definition.
     *
     * @param name the macro name
     * @param parameters the macro parameters
     * @param content the macro content
     * @see #beginMacroMarker(String, java.util.Map, String)
     */
    void endMacroMarker(String name, Map<String, String> parameters, String content);

    /**
     * An explicit line break specified in the wiki syntax. For example for XWiki this would be "\\". Note
     * that this is different from a new line which is triggered when the new line character is found ("\n") and which
     * generates an {@link #onNewLine()} event.
     */
    void onLineBreak();

    /**
     * An implicit new line triggered when the new line character is found ("\n"). Note that this is
     * different from a line break which is explicitely specified in wiki syntax, and which generates a
     * {@link #onLineBreak()} event.
     */
    void onNewLine();

    /**
     * A link.
     *
     * @param link the link definition (label, reference, target, etc)
     * @see Link
     */
    void onLink(Link link);

    /**
     * A {@link org.xwiki.rendering.macro.Macro} located inside another Block. For example a Macro inside a Paragraph
     * Block.
     *
     * @param name the macro name
     * @param parameters the macro parameters
     * @param content the macro content
     * @since 1.6M2
     */
    void onInlineMacro(String name, Map<String, String> parameters, String content);

    /**
     * A {@link org.xwiki.rendering.macro.Macro} by itself on a line (ie not inside another Block).
     *
     * @param name the macro name
     * @param parameters the macro parameters
     * @param content the macro content
     * @since 1.6M2
     */
    void onStandaloneMacro(String name, Map<String, String> parameters, String content);

    /**
     * A word. Note that sentences ar broken into different events: word events, special symbols events, space
     * events, etc. This allows fine-grained actions for listeners.
     *
     * @param word the word encountered
     */
    void onWord(String word);

    /**
     * A space.
     */
    void onSpace();

    /**
     * A special symbol ("*", "<", ">", "=", quote, etc). Any non alpha numeric character is a special symbol.
     *
     * @param symbol the symbol encountered
     */
    void onSpecialSymbol(String symbol);

    /**
     * A string that is escaped, ie which contains special characters that should not be transformed and that
     * should be rendered as is.
     * 
     * @param escapedString the string to keep as is
     * @since 1.5RC1
     */
    void onEscape(String escapedString);

    /**
     * A reference/location in a page. In HTML for example this is called an Anchor. It allows pointing
     * to that location, for example in links. Note that there is no wiki syntax for this in general and it's
     * often generated by Macros (such as the TOC Macro).
     *
     * @param name the location name.
     * @since 1.6M1
     */
    void onId(String name);

    /**
     * Represents an horizontal line.
     * @since 1.6M1
     */
    void onHorizontalLine();

    /**
     * Represents an empty line between 2 standalone Blocks. A standalone block is block that is not included in
     * another block. Standalone blocks are Paragraph, Standalone Macro, Lists, Table, etc.
     *
     * @param count the number of empty lines between 2 standalone Blocks
     */
    void onEmptyLines(int count);

    /**
     * A portion of text that shouldn't be rendered and that is located inside another Block.
     *  
     * @param protectedString the string to protected from rendering
     */
    void onVerbatimInline(String protectedString);

    /**
     * A portion of text that shouldn't be rendered and that is located on one or several lines by itself.
     *
     * @param protectedString the string to protected from rendering
     */
    void onVerbatimStandalone(String protectedString);
}
