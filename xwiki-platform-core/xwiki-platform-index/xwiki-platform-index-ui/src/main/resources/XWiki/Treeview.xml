<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.1">
  <web>XWiki</web>
  <name>Treeview</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1252450800000</creationDate>
  <parent>Main.AllDocs</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1414090767000</date>
  <contentUpdateDate>1414082508000</contentUpdateDate>
  <version>1.1</version>
  <title>$services.localization.render('platform.index.tree')</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity output="false"}}
#macro (handleTreeViewRequest)
  #if ($request.action)
    #if ($services.csrf.isTokenValid($request.form_token))
      #if ($request.action == 'delete')
        #deleteNode($request.id)
      #else
        $response.sendError(400, 'The specified action is not supported.')
      #end
    #elseif ($isAjaxRequest)
      $response.sendError(403, 'The CSRF token is missing.')
    #else
      $response.sendRedirect($services.csrf.getResubmissionURL())
    #end
  #else
    #set ($data = $NULL)
    #if ($request.data == 'children')
      #getChildren($request.id $data)
    #elseif ($request.data == 'path')
      #getPath($request.id $data)
    #elseif ($request.data == 'contextMenu')
      #getContextMenu($data)
    #end
    #if ($data)
      #set ($discard = $response.setContentType('application/json'))
      $jsontool.serialize($data)
    #else
      $response.sendError(404);
    #end
  #end
#end

#macro (deleteNode $nodeId)
  #set ($parts = $nodeId.split(':', 2))
  #set ($nodeType = $parts[0])
  #set ($nodeId = $parts[1])
  #if ($nodeType == 'document')
    #set ($documentReference = $services.model.resolveDocument($nodeId))
    #set ($document = $xwiki.getDocument($documentReference))
    #set ($discard = $document.delete())
  #else
    $response.sendError(400, 'The specified action is not supported.')
  #end
#end

#macro (getChildren $nodeId $return)
  #set ($children = [])
  #if ($nodeId == '#')
    ## Select the root node.
    #set ($nodeType = 'wiki')
  #else
    #set ($parts = $nodeId.split(':', 2))
    #set ($nodeType = $parts[0])
    #set ($nodeId = $parts[1])
  #end
  #set ($offset = $mathtool.max($mathtool.toInteger($request.offset), 0))
  #if ("$!offset" == '')
    #set ($offset = 0)
  #end
  #evaluate("${escapetool.h}add$stringtool.capitalize($nodeType)Children(${escapetool.d}nodeId
    $offset 15 ${escapetool.d}children)")
  #set ($return = $NULL)
  #setVariable("$return" $children)
#end

#macro (addWikiChildren $wikiId $offset $limit $children)
  #set ($spaces = $xwiki.spaces)
  #set ($totalCount = $spaces.size())
  ## Limit the list of spaces.
  #set ($spaces = $spaces.subList($offset, $mathtool.min($mathtool.add($offset, $limit), $totalCount)))
  #set ($wikiReference = $services.model.createWikiReference($xcontext.database))
  #foreach ($space in $spaces)
    #set ($spaceReference = $services.model.createSpaceReference($space, $wikiReference))
    #addSpaceNode($spaceReference $children)
  #end
  #if ($spaces.size() &gt;= $limit)
    #set ($newOffset = $mathtool.add($offset, $spaces.size()))
    #if ($newOffset &lt; $totalCount)
      #addPaginationNode("wiki:$wikiReference.name" $newOffset $totalCount $children)
    #end
  #end
#end

#macro (addSpaceNode $spaceReference $siblings)
  #set ($spaceId = $services.model.serialize($spaceReference, 'default'))
  #set ($spaceHomePageRef = $services.model.resolveDocument('', 'default', $spaceReference))
  #set ($spacePrefsDocRef = $services.model.resolveDocument('WebPreferences', 'explicit', $spaceReference))
  #set ($hasSpaceAdmin = $xwiki.hasAccessLevel('admin', $xcontext.user, $spacePrefsDocRef))
  #set ($discard = $siblings.add({
    'id': "space:$spaceId",
    'text': $spaceReference.name,
    'icon': 'fa fa-folder-open-o',
    'children': true,
    'data': {
      'id': $spaceId,
      'type': 'space',
      'validChildren': ['document', 'pagination'],
      'hasContextMenu': true,
      'canRename': $hasSpaceAdmin,
      'canDelete': $hasSpaceAdmin,
      'createDocumentURL': $xwiki.getURL($spaceHomePageRef, 'create', $NULL)
    },
    'a_attr': {
      'href': $xwiki.getURL($spaceHomePageRef)
    }
  }))
#end

#macro (addSpaceChildren $spaceId $offset $limit $children)
  ## Get all the documents from this space that either don't have a parent or that have a parent in a different space.
  #set ($query = $services.query.hql("where doc.space = :space and doc.translation = 0 and (doc.parent = '' or (doc.parent like '%.%' and doc.parent not like :absoluteRef and doc.parent not like :localRef)) order by doc.name"))
  #set ($spaceReference = $services.model.resolveSpace($spaceId))
  #set ($query = $query.bindValue('space', $spaceReference.name))
  #set ($absoluteRef = $services.model.resolveDocument('%', 'explicit', $spaceReference))
  #set ($query = $query.bindValue('absoluteRef', "$absoluteRef"))
  #set ($localRef = $services.model.serialize($absoluteRef, 'compactwiki', $absoluteRef.wikiReference))
  #set ($query = $query.bindValue('localRef', $localRef))
  #addDocumentNodesFromQuery($query $offset $limit $spaceReference $children)
#end

#macro (addDocumentNodesFromQuery $_query $offset $limit $parentReference $children)
  #set ($wikiReference = $parentReference.extractReference('WIKI'))
  #set ($_query = $_query.setWiki($wikiReference.name).addFilter('hidden'))
  #set ($results = $_query.setOffset($offset).setLimit($limit).execute())
  #foreach ($docFullName in $results)
    #set ($documentReference = $services.model.resolveDocument($docFullName, 'explicit', $parentReference))
    #addDocumentNode($documentReference $children)
  #end
  #if ($results.size() &gt;= $limit)
    ## There may be more documents in this space.
    #set ($totalCount = $_query.count())
    #set ($newOffset = $mathtool.add($offset, $results.size()))
    #if ($newOffset &lt; $totalCount)
      #set ($parentRefAsString = $services.model.serialize($parentReference, 'default'))
      #set ($parentId = "$parentReference.type.toLowerCase():$parentRefAsString")
      #addPaginationNode($parentId $newOffset $totalCount $children)
    #end
  #end
#end

#macro (addDocumentNode $documentReference $siblings)
  #set ($docNode = $xwiki.getDocument($documentReference))
  #set ($hasChildren = $docNode.translationList.size() &gt; 0)
  #set ($hasChildren = $hasChildren || $docNode.attachmentList.size() &gt; 0)
  #if (!$hasChildren)
    #getChildDocumentsCount($documentReference $count)
    #set ($hasChildren = $count &gt; 0)
  #end
  #set ($canDeleteDoc = $docNode.hasAccessLevel('delete'))
  #set ($label = $docNode.plainTitle)
  #if ($stringtool.isBlank($label))
    #set ($label = $documentReference.name)
  #end
  #set ($discard = $siblings.add({
    'id': "document:$documentReference",
    'text': $label,
    'icon': 'fa fa-file-o',
    'children': $hasChildren,
    'data': {
      'id': "$documentReference",
      'type': 'document',
      'validChildren': ['translations', 'attachments', 'attachment', 'document', 'pagination'],
      'hasContextMenu': true,
      'draggable': true,
      'canDelete': $canDeleteDoc,
      'canMove': $canDeleteDoc,
      'canCopy': true,
      'createDocumentURL': $xwiki.getURL($documentReference, 'create', $NULL)
    },
    'a_attr': {
      'href': $docNode.getURL()
    }
  }))
#end

#macro (getChildDocumentsQuery $parentReference $return)
  #set ($statement = 'where doc.space = :space and doc.translation = 0 and doc.parent in (:absoluteRef, :localRef, :relativeRef)')
  #set ($query = $services.query.hql($statement))
  #set ($query = $query.bindValue('space', $parentReference.lastSpaceReference.name))
  #set ($query = $query.bindValue('absoluteRef', "$parentReference"))
  #set ($query = $query.bindValue('localRef', $services.model.serialize($parentReference, 'compact', $parentReference.wikiReference)))
  #set ($query = $query.bindValue('relativeRef', $services.model.serialize($parentReference, 'compact', $parentReference.parent)))
  #set ($return = $NULL)
  #setVariable("$return" $query)
#end

#macro (getChildDocumentsCount $parentReference $return)
  #getChildDocumentsQuery($parentReference $countQuery)
  #set ($count = $countQuery.setWiki($parentReference.wikiReference.name).addFilter('hidden').count())
  #set ($return = $NULL)
  #setVariable("$return" $count)
#end

#macro (addPaginationNode $parentId $offset $totalCount $siblings)
  #set ($discard = $siblings.add({
    'id': "pagination:$parentId",
    'text': "$!mathtool.sub($totalCount, $offset) more ...",
    'icon': 'fa fa-eye',
    'children': false,
    'data': {
      'type': 'pagination',
      'validChildren': [],
      'canDelete': true,
      'offset': $offset
    }
  }))
#end

#macro (addDocumentChildren $docId $offset $limit $children)
  #set ($documentReference = $services.model.resolveDocument($docId))
  #set ($docNode = $xwiki.getDocument($documentReference))
  #set ($canEditDoc = $docNode.hasAccessLevel('edit'))
  #set ($canDeleteDoc = $docNode.hasAccessLevel('delete'))
  #if ($docNode.translationList.size() &gt; 0)
    #set ($discard = $children.add({
      'id': "translations:${documentReference}",
      'text': 'Translations',
      'icon': 'fa fa-language',
      'children': true,
      'data': {
        'type': 'translations',
        'validChildren': ['translation'],
        'canDelete': $canDeleteDoc
      }
    }))
  #end
  #if ($docNode.attachmentList.size() &gt; 0)
    #set ($discard = $children.add({
      'id': "attachments:${documentReference}",
      'text': 'Attachments',
      'icon': 'fa fa-paperclip',
      'children': true,
      'data': {
        'type': 'attachments',
        'validChildren': ['attachment', 'pagination'],
        'hasContextMenu': true,
        'canDelete': $canEditDoc
      },
      'a_attr': {
        'href': $docNode.getURL('view', 'viewer=attachments')
      }
    }))
  #end
  #getChildDocumentsQuery($documentReference $query)
  #addDocumentNodesFromQuery($query $offset $limit $documentReference $children)
#end

#macro (addTranslationsChildren $docId $offset $limit $children)
  #set ($docRef = $services.model.resolveDocument($docId))
  #set ($docNode = $xwiki.getDocument($docRef))
  #foreach ($language in $docNode.translationList)
    #set ($locale = $services.localization.toLocale($language))
    #set ($translationReference = $services.model.createDocumentReference($docNode.documentReference, $locale))
    #addTranslationNode($translationReference $children)
  #end
#end

#macro (addTranslationNode $translationReference $siblings)
  #set ($currentLocale = $services.localization.currentLocale)
  #set ($translationNode = $xwiki.getDocument($translationReference))
  #set ($discard = $siblings.add({
    'id': "translation:$services.model.serialize($translationReference, 'default')_$translationReference.locale",
    'text': $translationReference.locale.getDisplayName($currentLocale),
    'icon': 'fa fa-file-text-o',
    'children': false,
    'data': {
      'type': 'translation',
      'validChildren': [],
      'canDelete': $translationNode.hasAccessLevel('delete')
    },
    'a_attr': {
      'href': $xwiki.getURL($translationReference, 'view', $escapetool.url({
        'language': $translationReference.locale
      }))
    }
  }))
#end

#macro (addAttachmentsChildren $docId $offset $limit $children)
  #set ($docRef = $services.model.resolveDocument($docId))
  #set ($docNode = $xwiki.getDocument($docRef))
  #set ($canEditDoc = $docNode.hasAccessLevel('edit'))
  #set ($attachments = $docNode.attachmentList)
  #set ($totalCount = $attachments.size())
  ## Limit the number of attachments.
  #set ($attachments = $attachments.subList($offset, $mathtool.min($mathtool.add($offset, $limit), $totalCount)))
  #foreach ($attachment in $attachments)
    #addAttachmentNode($attachment $children)
  #end
  #if ($attachments.size() &gt;= $limit)
    #set ($newOffset = $mathtool.add($offset, $attachments.size()))
    #if ($newOffset &lt; $totalCount)
      #addPaginationNode("attachments:$docId" $newOffset $totalCount $children)
    #end
  #end
#end

#macro (addAttachmentNode $attachment $siblings)
  #set ($attachmentReference = $services.model.createAttachmentReference($attachment.document.documentReference,
    $attachment.filename))
  #set ($attachmentId = $services.model.serialize($attachmentReference, 'default'))
  #set ($discard = $siblings.add({
    'id': "attachment:$attachmentId",
    'text': $attachment.filename,
    'icon': 'fa fa-paperclip',
    'children': false,
    'data': {
      'id': $attachmentId,
      'type': 'attachment',
      'validChildren': [],
      'hasContextMenu': true,
      'draggable': true,
      'canRename': $canEditDoc,
      'canDelete': $canEditDoc,
      'canMove': $canEditDoc,
      'canCopy': true
    },
    'a_attr': {
      'href': $docNode.getAttachmentURL($attachment.filename)
    }
  }))
#end

#macro (getPath $nodeId $return)
  #set ($parts = $nodeId.split(':', 2))
  #if ($parts.size() == 1)
    #set ($path = [$nodeId])
  #else
    #set ($nodeType = $parts[0])
    #set ($nodeId = $parts[1])
    #set ($path = [])
    #evaluate("${escapetool.h}get$stringtool.capitalize($nodeType)Path(${escapetool.d}nodeId ${escapetool.d}path)")
  #end
  #set ($return = $NULL)
  #setVariable("$return" $path)
#end

#macro (getDocumentPath $docRefOrId $path)
  #set ($docRef = $docRefOrId.extractReference('DOCUMENT'))
  #if (!$docRef)
    #set ($docRef = $services.model.resolveDocument($docRefOrId))
  #end
  #set ($docPath = [])
  ## We are forced to build the document path in reverse order due to the limited way we can do recursion in Velocity
  ## (variables are overwritten so we must store and then do recursion, not the other way around).
  #getDocumentPathRecursively($docRef $docPath)
  #set ($discard = $collectionstool.reverse($docPath))
  #set ($discard = $path.addAll($docPath))
#end

#macro (getDocumentPathRecursively $docRef $path)
  #set ($discard = $path.add("document:$docRef"))
  #set ($docNode = $xwiki.getDocument($docRef))
  #if ($docNode.parent != '')
    #set ($parentReference = $services.model.resolveDocument($docNode.parent, 'explicit', $docRef))
    #if ($docRef.parent.equals($parentReference.parent))
      ## The parent document must be in the same space.
      #getDocumentPathRecursively($parentReference $path)
    #else
      ## The parent node is the space itself.
      #set ($discard = $path.add("space:$services.model.serialize($docRef.parent, 'default')"))
    #end
  #else
    ## The parent node is the space itself.
    #set ($discard = $path.add("space:$services.model.serialize($docRef.parent, 'default')"))
  #end
#end

#macro (getAttachmentsPath $docRefOrId $path)
  #getDocumentPath($docRefOrId $path)
  #set ($discard = $path.add("attachments:$docRefOrId"))
#end

#macro (getAttachmentPath $attachmentId $path)
  #set ($attachmentReference = $services.model.resolveAttachment($attachmentId))
  #getAttachmentsPath($attachmentReference.documentReference $path)
  #set ($discard = $path.add("attachment:$services.model.serialize($attachmentReference, 'default')"))
#end

#macro (getContextMenu $return)
  #set ($contextMenuByNodeType = {
    'space': {
      'createDocument': {
        'label': 'New Page',
        'icon': 'fa fa-file-o',
        'action': 'openLink',
        'parameters': {
          'urlProperty': 'createDocumentURL'
        }
      },
      'openLink': {
        'separator_before': true,
        'label': 'Go to Space',
        'icon': 'fa fa-external-link'
      },
      'refresh': {
        'label': 'Refresh',
        'icon': 'fa fa-refresh'
      },
      'paste': {
        'separator_before': true,
        'label': 'Paste Into Space',
        'icon': 'fa fa-clipboard'
      },
      'rename': {
        'label': 'Rename...',
        'icon': 'fa fa-pencil-square-o'
      },
      'remove': {
        'label': 'Delete',
        'icon': 'fa fa-trash-o',
        'parameters': {
          'confirmationMessage': 'Are you sure you want to delete this space?'
        }
      }
    },
    'document': {
      'createDocument': {
        'label': 'New Page',
        'icon': 'fa fa-file-o',
        'action': 'openLink',
        'parameters': {
          'urlProperty': 'createDocumentURL'
        }
      },
      'openLink': {
        'separator_before': true,
        'label': 'Go to Page',
        'icon': 'fa fa-external-link'
      },
      'refresh': {
        'label': 'Refresh',
        'icon': 'fa fa-refresh'
      },
      'cut': {
        'separator_before': true,
        'label': 'Cut',
        'icon': 'fa fa-scissors'
      },
      'copy': {
        'label': 'Copy',
        'icon': 'fa fa-files-o'
      },
      'paste': {
        'label': 'Paste',
        'icon': 'fa fa-clipboard'
      },
      'remove': {
        'separator_before': true,
        'label': 'Delete',
        'icon': 'fa fa-trash-o',
        'parameters': {
          'confirmationMessage': 'Are you sure you want to delete this page?'
        }
      }
    },
    'attachments': {
      'openLink': {
        'label': 'Go to Attachments',
        'icon': 'fa fa-external-link'
      },
      'refresh': {
        'label': 'Refresh',
        'icon': 'fa fa-refresh'
      },
      'paste': {
        'separator_before': true,
        'label': 'Paste',
        'icon': 'fa fa-clipboard'
      },
      'remove': {
        'label': 'Delete All',
        'icon': 'fa fa-trash-o',
        'parameters': {
          'confirmationMessage': 'Are you sure you want to delete all the attachments of this page?'
        }
      }
    },
    'attachment': {
      'openLink': {
        'label': 'Go to Attachment',
        'icon': 'fa fa-external-link'
      },
      'cut': {
        'separator_before': true,
        'label': 'Cut',
        'icon': 'fa fa-scissors'
      },
      'copy': {
        'label': 'Copy',
        'icon': 'fa fa-files-o'
      },
      'rename': {
        'separator_before': true,
        'label': 'Rename...',
        'icon': 'fa fa-pencil-square-o'
      },
      'remove': {
        'label': 'Delete',
        'icon': 'fa fa-trash-o',
        'parameters': {
          'confirmationMessage': 'Are you sure you want to delete this attachment?'
        }
      }
    }
  })
  #set ($return = $NULL)
  #setVariable("$return" $contextMenuByNodeType)
#end
{{/velocity}}

{{velocity wiki="false"}}
#if ($xcontext.action == 'get')
  #handleTreeViewRequest
#end
{{/velocity}}

{{velocity}}
#if ($xcontext.action != 'get')
  {{tree source="XWiki.Treeview" /}}
#end
{{/velocity}}</content>
</xwikidoc>
