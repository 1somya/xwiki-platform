##syntax=xwiki/2.1
{{velocity output="false"}}
#macro(displayUpgradePlanStatus $status)
  ## The status is null after the job is created, until the job is scheduled.
  #set ($isLoading = !$status || ($status.log.isEmpty() && $status.state != 'FINISHED'))
  (% class="extension-body-progress#if ($isLoading) loading#end" %)(((
    #if ($status)
      {{html}}#printStatusLog($status){{/html}}
    #end
  )))
#end

#macro (displayUpgradePlan $plan)
  #set($hasError = false)
  #foreach($log in $plan.log)
    #if ($log.level.name() == 'ERROR')
      #set($hasError = true)
      #break
    #end
  #end
  ##
  #if ($hasError)
    #displayUpgradePlanStatus($plan)
  #else
    ## Group extensions by status (invalid/outdated) and by namespace.
    #set ($invalid = {})
    #set ($outdated = {})
    ## Iterate the first level nodes from the upgrade plan tree.
    #foreach ($firstLevelNode in $plan.tree)
      #set ($planAction = $firstLevelNode.action)
      #set ($status = $NULL)
      #set ($installedVersion = $services.extension.getInstalledExtension($planAction.extension.id.id, $planAction.namespace))
      #if (!$installedVersion.isValid($planAction.namespace))
        #set ($status = $invalid)
      ## Check if the latest version has been installed after the upgrade plan was created.
      #elseif ($installedVersion.id.version.value != $planAction.extension.id.version.value)
        #set ($status = $outdated)
      #end
      #if ($status)
        #set ($statusForNamespace = $status.get($planAction.namespace))
        #if (!$statusForNamespace)
          #set ($statusForNamespace = [])
          #set ($discard = $status.put($planAction.namespace, $statusForNamespace))
        #end
        #set ($discard = $statusForNamespace.add($planAction))
      #end
    #end
    #set ($showCompleteStepButton = $invalid.isEmpty())
    ##
    #if ($outdated.isEmpty() && $invalid.isEmpty())
      {{info}}{{translation key="platform.extension.distributionWizard.extensionsStepUpToDate"/}}{{/info}}
    #else
      #displayPlanActionByNamespace($invalid 'Invalid')

      #displayPlanActionByNamespace($outdated 'Outdated')
    #end
  #end

  (% class="xHint" %)
  $services.localization.render('platform.extension.distributionWizard.extensionsStepReloadHint',
    ['[[', ">>||id=""prepareUpgradeLink"" queryString=""action=prepareUpgrade&xredirect=$!escapetool.url($request.xredirect)""]]"])
#end

#macro(displayPlanActionByNamespace $actionByNamespace $key)
  #if (!$actionByNamespace.isEmpty())
    (% class="xLabel" %)
    {{translation key="platform.extension.distributionWizard.extensionsStep${key}ExtensionsLabel"/}}

  #end
  #foreach ($entry in $actionByNamespace.entrySet())
    (% class="xHint" %)
    $services.localization.render("platform.extension.distributionWizard.extensionsStep${key}ExtensionsHint",
      ["#displayExtensionNamespace($entry.key)"])

    (% class="$key.toLowerCase()Extensions" %)(((
      #foreach ($planAction in $entry.value)
        #set ($extensionNamespace = $planAction.namespace)
        {{html}}#displayExtension($planAction.extension){{/html}}

      #end
    )))
  #end
#end

#macro(prepareUpgrade $upgradePlan)
  ## Create the upgrade plan for the entire farm.
  #set ($upgradePlanJob = $services.extension.createUpgradePlan())
  #set ($lastError = $services.extension.lastError)
  #if ($lastError)
    {{error}}
      {{translation key="platform.extension.distributionWizard.extensionsStepPrepareUpgradeFailure"/}}##
      {{html}}#printThrowable($lastError){{/html}}
    {{/error}}

  #else
    #set ($distributionId = "$services.distribution.distributionExtension.id")
    #set ($discard = $upgradePlanJob.request.setProperty('distribution.id', $distributionId))
    #set ($upgradePlan = $null)
    #setVariable ("$upgradePlan" $upgradePlanJob.status)
  #end
#end
{{/velocity}}

{{velocity}}
#if ("$!request.action" == '')
  ## Display the step.
  #if (!$isAjaxRequest)
    $services.localization.render('platform.extension.distributionWizard.extensionsStepDescription', [
      '[[', '>>http://platform.xwiki.org/xwiki/bin/view/Features/Applications]]',
      '[[', '>>http://extensions.xwiki.org/xwiki/bin/view/Extension/Wiki+Macro+Bridge+Application]]',
      '[[', '>>http://extensions.xwiki.org/xwiki/bin/view/Extension/Color+Theme+Application]]',
      '[[', '>>http://extensions.xwiki.org/xwiki/bin/view/Extension/Component+Module]]',
      '[[', '>>http://extensions.xwiki.org/xwiki/bin/view/Extension/Script+Module#HScriptServices]]'])

  #end
  #set ($distributionId = "$services.distribution.distributionExtension.id")
  ## Get the status of the upgrade plan job for the entire farm.
  #set ($upgradePlan = $services.extension.getExtensionPlanJobStatus($null, $null))
  #if (!$upgradePlan || $upgradePlan.request.getProperty('distribution.id') != $distributionId)
    ## Schedule the upgrade plan creation job.
    #prepareUpgrade($upgradePlan)
  #end
  #if ($upgradePlan.state != 'FINISHED')
    {{translation key="platform.extension.distributionWizard.extensionsStepLoading"/}}

    {{html}}#displayJobProgressBar($upgradePlan){{/html}}

    #displayUpgradePlanStatus($upgradePlan)
  #else
    #displayUpgradePlan($upgradePlan)
  #end
#elseif ($request.action == 'prepareUpgrade')
  #prepareUpgrade()
#end
{{/velocity}}
