#macro(handleStepAction $action)
  #if ($action == 'prepareUpgrade')
    #prepareUpgrade()
  #else
    #set ($distributionJobStatus = $services.distribution.jobStatus)
    #set ($distributionQuestion = $distributionJobStatus.question)
    #if ($distributionQuestion)
      $distributionQuestion.setUpdateState($action)
      $distributionJobStatus.answered()
    #end
  #end
  $response.sendRedirect($xwiki.getURL('XWiki.Distribution', 'distribution', "xredirect=$!escapetool.url($request.xredirect)"))
#end

#macro(handleStepAjaxRequest)
  #set ($stepId = $services.distribution.jobStatus.question.stepId)
  #if ($stepId == 'extension.outdatedextensions')
    #displayOutdatedExtensionsStep()
  #end
#end

#macro(displayStep)
  #template('xwikivars.vm')
  #template('htmlheader.vm')
  $xwiki.ssfx.use('uicomponents/extension/distribution.css')
  $xwiki.jsfx.use('uicomponents/extension/distribution.js', true)
  #set ($stepId = $services.distribution.jobStatus.question.stepId)
  <div id="$!stepId">
    <div class="xdialog-screen"></div>
    <div class="xdialog-box">
      <div class="xdialog-title">$msg.get('extensions.distribution.wizardTitle')</div>
      <div class="xdialog-content">
        #if ($request.extensionId && $request.extensionVersion)
          ## The user can get here by clicking on an extension link.
          #handleExtensionRequest()
        #else
          #displayStepContent($stepId)
          #displayStepButtons()
        #end
      </div>
    </div>
  </div>
  #template('htmlfooter.vm')
#end

#macro(displayStepContent $stepId)
  #if ($stepId == 'extension.mainui')
    #displayMainUIStep()
  #elseif ($stepId == 'extension.outdatedextensions')
    #displayOutdatedExtensionsStep()
  #else
    <div class="box errormessage">Unknown step</div>
  #end
#end

#macro(displayMainUIStep)
  #set ($distributionState = $services.distribution.state)
  #if (!$distributionState || $distributionState == 'NONE')
    <div class="box errormessage">$msg.get('extensions.distribution.error.noState')</div>
  #else
    <p>$msg.get('extensions.distribution.hint')</p>
    #set ($distributionExtension = $services.distribution.distributionExtension)
    #if ($distributionExtension)
      ## Wrap the extension in a DIV so that its bottom border is displayed.
      <div>#displayExtension($distributionExtension)</div>
    #else
      <div class="box infomessage">$msg.get('extensions.advancedSearch.noResults',
        ["<strong>$!escapetool.xml($distributionExtension.id.id)</strong>",
        "<strong>$!escapetool.xml($distributionExtension.id.version)</strong>"])</div>
    #end

    #set ($distributionUIId = $services.distribution.getUIExtensionId())
    #if ($distributionUIId)
      #set ($installedVersion = $services.extension.getInstalledExtension($distributionUIId.id, 'wiki:xwiki'))
      #set ($showCompleteStepButton = $installedVersion.isValid('wiki:xwiki'))

      ## Allow the user to install, upgrade or downgrade the UI.
      <p>$msg.get('extensions.distribution.uiHint')</p>
      #set ($distributionUIExtension = $services.extension.resolve($distributionUIId.id, $distributionUIId.version.value))
      #if ($distributionUIExtension)
        #displayExtension($distributionUIExtension)
      #else
        <div class="box infomessage">$msg.get('extensions.advancedSearch.noResults',
          ["<strong>$!escapetool.xml($distributionUIId.id)</strong>",
          "<strong>$!escapetool.xml($distributionUIId.version)</strong>"])</div>
      #end

      #if ($distributionState == 'NEW' && !$showCompleteStepButton)
        ## Either a new install or an upgrade from a version that doesn't have the distribution module.
        ## TODO: Ask the user if a previous version of the UI was installed without the Extension Manager. Retrieve the
        ## list of versions available for the recommended UI and let the user choose the version he's currently using.
        ## Do a fake install of the selected version.
      #elseif ($distributionState == 'DIFFERENT')
        ## TODO: Display the previous distribution UI extension to let the user uninstall it.
      #end
    #else
      <div class="box warningmessage">$msg.get('extensions.distribution.error.noUI')</div>
      ## TODO: Display the Extension Manager search bar so that the user can search for an extension that provides the main UI.
    #end
  #end
#end

#macro(displayOutdatedExtensionsStep)
  #set ($distributionId = "$services.distribution.distributionExtension.id")
  ## Get the status of the upgrade plan job for the entire farm.
  #set ($upgradePlan = $services.extension.getExtensionPlanJobStatus($null, $null))
  #if (!$upgradePlan || $upgradePlan.request.getProperty('distribution.id') != $distributionId)
    ## Schedule the upgrade plan creation job.
    #prepareUpgrade($upgradePlan)
  #end
  #if ($upgradePlan.state != 'FINISHED')
    #displayJobProgressBar($upgradePlan)
    #displayUpgradePlanStatus($upgradePlan)
  #else
    #displayUpgradePlan($upgradePlan)
  #end
#end

#macro(displayUpgradePlanStatus $status)
  ## The status is null after the job is created, until the job is scheduled.
  #set ($isLoading = !$status || ($status.log.isEmpty() && $status.state != 'FINISHED'))
  <div id="upgradePlanLog" class="extension-body-progress#if($isLoading) loading#end">
    #if ($status)
      #printStatusLog($status)
    #end
  </div>
#end

#macro (displayUpgradePlan $plan)
  #set($hasError = false)
  #foreach($log in $plan.log)
    #if ($log.level.name() == 'ERROR')
      #set($hasError = true)
      #break
    #end
  #end
  ##
  #if ($hasError)
    #displayUpgradePlanStatus($plan)
  #else
    #set ($invalid = [])
    #set ($outdated = [])
    ## Iterate the first level nodes from the upgrade plan tree.
    #foreach ($firstLevelNode in $plan.tree)
      #set ($planAction = $firstLevelNode.action)
      #set ($installedVersion = $services.extension.getInstalledExtension($planAction.extension.id.id, $planAction.namespace))
      #if (!$installedVersion.isValid($planAction.namespace))
        #set ($discard = $invalid.add($planAction))
      ## Check if the latest version has been installed after the upgrade plan was created.
      #elseif ($installedVersion.id.version.value != $planAction.extension.id.version.value)
        #set ($discard = $outdated.add($planAction))
      #end
    #end
    #set ($showCompleteStepButton = $invalid.isEmpty())
    ##
    #if ($outdated.isEmpty() && $invalid.isEmpty())
      <div class="box infomessage">$msg.get('extensions.distribution.upToDate')</div>
    #else
      #displayPlanActionList($invalid 'invalid')
      #displayPlanActionList($outdated 'outdated')
    #end
  #end
  <form action="" class="xform">
    <p class="buttons">
      <span class="buttonwrapper">
        <button id="prepareUpgradeButton" type="submit" name="action" value="prepareUpgrade" class="secondary">$msg.get('extensions.distribution.stepAction.prepareUpgrade')</button>
      </span>
    </p>
  </form>
#end

#macro(displayPlanActionList $list $key)
  #if ($list.size() > 0)
    <p>$msg.get("extensions.distribution.list.$key")</p>
    <div id="${key}Extensions">
    #foreach ($planAction in $list)
      #set ($extensionNamespace = $planAction.namespace)
      #displayExtension($planAction.extension)
    #end
    </div>
  #end
#end

#macro(prepareUpgrade $upgradePlan)
  ## Create the upgrade plan for the entire farm.
  #set ($upgradePlanJob = $services.extension.createUpgradePlan($null))
  #set ($lastError = $services.extension.lastError)
  #if ($lastError)
    <div class="box errormessage">$msg.get('extensions.distribution.error.prepareUpgradeFailure') #printThrowable($lastError)</div>
  #else
    #set ($distributionId = "$services.distribution.distributionExtension.id")
    #set ($discard = $upgradePlanJob.request.setProperty('distribution.id', $distributionId))
    #set ($upgradePlan = $null)
    #setVariable ("$upgradePlan" $upgradePlanJob.status)
  #end
#end

#macro(displayStepButtons)
  <form action="" class="xform">
    <div id="stepButtons" class="buttons">
      #if ($request.xredirect)
        <input type="hidden" name="xredirect" value="$escapetool.xml($request.xredirect)" />
      #end
      ## Normally we shouldn't generate the buttons that are not supposed to be visible but we want to simplify the
      ## JavaScript code and to avoid duplicating the HTML by adding the buttons dynamically.
      <span class="buttonwrapper#if (!$showCompleteStepButton) hidden#end">
        <button type="submit" name="action" value="COMPLETE_STEP">$msg.get('extensions.distribution.stepAction.complete')</button>
      </span>
      <span class="buttonwrapper#if ($showCompleteStepButton) hidden#end">
        <button class="secondary" type="submit" name="action" value="SKIP_STEP"
          title="$escapetool.xml($msg.get('extensions.distribution.stepAction.skip.hint'))">$msg.get('extensions.distribution.stepAction.skip')</button>
      </span>
      <span class="buttonwrapper#if ($showCompleteStepButton) hidden#end">
        <button class="secondary" type="submit" name="action" value="CANCEL_STEP"
          title="$escapetool.xml($msg.get('extensions.distribution.stepAction.cancel.hint'))">$msg.get('extensions.distribution.stepAction.cancel')</button>
      </span>
    </div>
  </form>
#end

#if ($services.distribution.jobStatus.state == 'FINISHED')
  #set ($redirectURL = $request.xredirect)
  #if ("$!redirectURL" == '')
    #set ($redirectURL = $xwiki.getURL('Main.WebHome'))
  #end
  $response.sendRedirect($redirectURL)
#elseif ("$!request.action" != '')
  #handleStepAction($request.action)
#else
  ## NOTE: We use #parse instead of #template because the later currently registers the Velocity macros in a different
  ## namespace which makes them unavailable in the current wiki page or the current template. Switch back to #template when
  ## this problem is fixed because #parse doesn't allow the template to be overridden from the skin.
  #parse('extension.vm')
  #if ($isAjaxRequest)
    #if ($request.extensionId)
      #handleExtensionRequest()
    #else
      #handleStepAjaxRequest()
    #end
  #else
    #displayStep()
  #end
#end