## ---------------------------------------------------------------------------------------------------------
## This template is called by the create action which binds some context variables as it executes, based on
## the request and the current document. These variables can be used in this template:
## * $spaceReference - the space reference of the new document, read from the "spaceReference" paremeter
## * $name - the name to use for the new document, read from the "name" parameter
## * $isSpace - true if we are creating a non-terminal document ($name is the space name), false if we are
##              creating a terminal document ($name is the document name). Determined by the create action
## * $availableTemplatesProviders - list of template provider documents available from the current space
##
## Note: Make sure to use these bindings instead of directly using the request parameters, as the bindings
## also consider backwards compatibility and convert older "space" and "page" parameters if they are passed.
## ---------------------------------------------------------------------------------------------------------

## ---------------------------------------------------------------------------------------------------------
## This template can be passed a parent document reference in parameter (using the "parent" parameter).
## If a parent parameter is passed, use it to set the parent when creating the new page.
## If no parent parameter was passed, the create action will determine it to be the current document if it
## exists or the Main space's webhome if the current document does not exist.
## ---------------------------------------------------------------------------------------------------------
#set ($parent = "$!request.getParameter('parent')")

## ---------------------------------------------------------------------------------------------------------
## This parent can be passed a title for the document to create (using the "title" parameter).
## The title is used to automatically compute a page name, which can then be customized by the user.
## If no title is given, the page name (if set) will be used as title.
## ---------------------------------------------------------------------------------------------------------
#if ("$!request.title" != '')
  #set ($title = "$!request.title")
#else
  #set ($title = "$!name")
#end

## ---------------------------------------------------------------------------------------------------------
## Get the passed template provider, if any
## ---------------------------------------------------------------------------------------------------------
#set($templateProvider = "$!request.templateprovider")
## Get the template as well, since in case template provider is missing, template should be used, 
## to allow creation from template directly, without necessarily going through template provider.
#set($template = "$!request.template")

## ---------------------------------------------------------------------------------------------------------
## If there was an exception creating the page because of invalid space, notify. 
## Should set the other variables only if there is no exception. Otherwise, if there's an exception other than the 
## 11016 one, nothing will be displayed, depending on the other passed parameters.
## ---------------------------------------------------------------------------------------------------------
#set($exception = $createException)
## check if the exception is about the non-allowed spaces for template
#if("$!exception" != '' && $exception.code == 11016)
  <div class="box errormessage">
    #set($allowedSpaces = $createAllowedSpaces)
    #if ($allowedSpaces.size() == 1)
      $services.localization.render('core.create.template.allowedspace.inline', [$templateProvider, $allowedSpaces.get(0)])
    #else
      $services.localization.render('core.create.template.allowedspaces.inline', [$templateProvider, $allowedSpaces.toString()])
    #end
  </div>
  ## Show the spaceReference input for the user to change the value
  #set ($showSpaceReferenceInput = true)
#end
## check if the exception is about the document which already exists
#if("$!exception" != '' && $exception.code == 11002)
  <div class='box errormessage'>
      ## Use the 'existingDocumentReference' context binding set by the create action for this case.
      $services.localization.render('core.create.page.error.docalreadyexists',
        ["${existingDocumentReference}",
         $xwiki.getURL($existingDocumentReference, 'view', ''),
         $xwiki.getURL($existingDocumentReference, 'edit', '')
        ]
      )
  </div>
  ## Show the spaceReference input for the user to change the value
  #set ($showSpaceReferenceInput = true)
  ## Show the name input for the user to change the value
  #set ($showNameInput = true)
#end
## ---------------------------------------------------------------------------------------------------------
## JavaScript validation and UI code
## ---------------------------------------------------------------------------------------------------------
$xwiki.get('jsfx').use('uicomponents/widgets/validation/livevalidation_prototype.js')##
$xwiki.get('ssfx').use('uicomponents/widgets/validation/livevalidation.css', true)##
$xwiki.get('jsfx').use('js/xwiki/create/create.js', true)##
$xwiki.get('ssfx').use('js/xwiki/create/create.css', true)##

## ---------------------------------------------------------------------------------------------------------
## Note: The list of available template providers is computed in the action and set on the context under
## the "availableTemplatesProviders" binding.
## ---------------------------------------------------------------------------------------------------------

## ---------------------------------------------------------------------------------------------------------
## Macro for displaying the available templates and changing target space rules accordingly
## ---------------------------------------------------------------------------------------------------------
#macro (displayTemplateChoice)
    ## ---------------------------------------------------------------------------------------------------------
    ## Template field
    ## ---------------------------------------------------------------------------------------------------------
    #if(!$availableTemplateProviders.isEmpty() && $template == '')
      <dl>
        <dt>
          <label>$services.localization.render('core.create.template')</label>
          <span class='xHint'>$services.localization.render('core.create.page.template.hint')</span>
        </dt>
        <dd>
          <label for='xwiki-create-form-0' class='xwiki-form-listclass'>
            <input id='xwiki-create-form-0' type='radio' name='templateprovider' value='' checked='checked' data-allowed-spaces='[]' data-allowed-spaces-message=''/>
            $services.localization.render('core.create.page.template.empty')
          </label>
          #foreach($tpdoc in $availableTemplateProviders)
            #set ($tpobj = $tpdoc.getObject('XWiki.TemplateProviderClass'))
            ##
            ## Extract and save in data-* attributes list of allowed spaces to be used in the JavaScript validation of the spaceReference input.
            ##
            #set($jsAllowedSpacesArray = '[]')## Reset any previous value
            #set($allowedSpaces = $tpobj.getProperty('spaces').getValue())
            #if($allowedSpaces.size() > 0)
              #set($jsAllowedSpacesArray = $jsontool.serialize($allowedSpaces))
            #end
            ## Compute the error message.
            #if($allowedSpaces.isEmpty())
              #set($message = '')
            #elseif($allowedSpaces.size() == 1)
              #set($message = $services.localization.render('core.create.template.allowedspace.inline', [$tpobj.getProperty('name').getValue(), $jsAllowedSpacesArray]))
            #else
              #set($message = $services.localization.render('core.create.template.allowedspaces.inline', [$tpobj.getProperty('name').getValue(), $jsAllowedSpacesArray]))
            #end
            ##
            ## Display the template provider field option in the form.
            ##
            #set($inputId = "xwiki-create-form-${velocityCount}")
            <label for="$inputId" class='xwiki-form-listclass'>
              ## pass the template provider to the create action. Prepare the template provider reference
              #set($tpdocRef = $services.model.serialize($tpdoc.documentReference, 'local'))
              <input id="$inputId" type='radio' name='templateprovider' value="$escapetool.xml(${tpdocRef})" #if ($templateProvider == $tpdocRef)checked='checked'#end
                data-allowed-spaces="$escapetool.xml($jsAllowedSpacesArray)" data-allowed-spaces-message="$escapetool.xml($message)"/>
              ## use the template name as a translation key, to allow i18n
              $escapetool.xml($services.localization.render($tpobj.getProperty('name').value))
            </label>
          #end
        </dd>
      </dl>
    #else
      #if ($template != '')
        ## if a template is set (to allow to get the create form from a template directly, without having to choose 
        ## the template provider), use that template
        <input type='hidden' id='template' name='template' value="$!{escapetool.xml($template)}" />
      #else
        ## finally, if none of these are set, put an empty template provider
        <input type='hidden' id='templateprovider' name='templateprovider' value='' />
      #end
    #end
#end
## ---------------------------------------------------------------------------------------------------------
## Display the form.
## ---------------------------------------------------------------------------------------------------------
## FIXME: Using the 'container' class when displayed in an ajax call by clicking on a Wanted Link so that it looks good (proper margins) in the popup.
<form action="$doc.getURL('create')" method='post' class='xform #if($request.ajax)container#end'>

  ## Deprecated: Pass along any received page parent.
  <input type='hidden' name='parent' value="$!{escapetool.xml($parent)}"/>

  ## Determine if we need to show the name input.
  #if (!$showNameInput)
    #set ($showNameInput = "$!name" == '')
  #end

  ## Determine if we need to show the space reference input.
  #set ($deprecatedSpaceCreate = ("$!request.tocreate" == 'space'))
  #if (!$showSpaceReferenceInput)
    ## We are on an existing document and no space reference was specified for the new document to create.
    #set ($showSpaceReferenceInput = (!$doc.isNew() && "$!spaceReference" == ''))
    #if ($showSpaceReferenceInput)
      ## In the deprecated space creation process however, we only needed the space name.
      #set ($showSpaceReferenceInput = !$deprecatedSpaceCreate)
    #end
  #end

  ## Determine if we need to show the first column.
  #set ($showFirstColumn = $showSpaceReferenceInput || $showNameInput)

  <div class='row'>
    #if ($showFirstColumn)
      <div class='col-xs-12 col-lg-6'>
        <dl>
          ##
          ## ---------------------------------------------------------------------------------------------------------
          ## Title field
          ## ---------------------------------------------------------------------------------------------------------
          ##
          #if ($title == '')
            #set ($defaultTitle = $services.localization.render('core.create.identifier.placeholder'))
            #set ($titleIsPlaceholder = true)
          #else
            #set ($defaultTitle = $title)
          #end
          <dt>
            <label for='title'>$services.localization.render('core.create.title')</label>
            <span class='xHint'>$services.localization.render('core.create.title.hint')</span>
          </dt>
          <dd>
            <input type='text' id='title' size='60' name='title' value="$defaultTitle" #if ($titleIsPlaceholder)class='withTip'#end/>
          </dd>
          ##
          ## ---------------------------------------------------------------------------------------------------------
          ## Location preview
          ## ---------------------------------------------------------------------------------------------------------
          ##
          <dt>
            <label for='locationPreview'>$services.localization.render('core.create.locationPreview.label')</label>
            <span class='xHint'>$services.localization.render('core.create.locationPreview.hint')</span>
          </dt>
          <dd>
            ## Location edit button
            <a href='#'><span id='location-edit-toggle' class='glyphicon glyphicon-pencil'></span></a>

            ## Hierarchy preview
            #if ("$!spaceReference" == '')
              #set ($hierarchyDoc = $tdoc)
            #else
              #set ($hierarchyDoc = $xwiki.getDocument($spaceReference))
            #end
            ## Note: we are only setting the spaceReference here. The new document part will be added from javascript.
            #template('hierarchy_macros.vm')
            #hierarchy($hierarchyDoc, true)
            ##
            ## ---------------------------------------------------------------------------------------------------------
            ## Location edit
            ## ---------------------------------------------------------------------------------------------------------
            ##
            <div id='location-edit' class='hidden'>
              <dl>
                ## ---------------------------------------------------------------------------------------------------------
                ## Space Reference field
                ## ---------------------------------------------------------------------------------------------------------
                ##
                #if ("$!spaceReference" == '')
                  ## Note: the $homeReference variable is defined in hierarchy_macros.vm which we have called above.
                  #if ($doc.documentReference.equals($homeReference))
                    ## We want to discourage ending up with all the pages children of the homepage so we
                    ## default to top level documents, uless the user explicitly says otherwise.
                    #set ($defaultSpaceReference = $NULL)
                  #else
                    ## For all other documents, default to the current space, i.e. create the new page as a child of the current one.
                    #set ($defaultSpaceReference = $doc.documentReference.lastSpaceReference)
                  #end
                #else
                  #set ($defaultSpaceReference = $spaceReference)
                #end
                ## Make sure to use the local serialized string reference
                #set ($defaultSpaceReferenceString = $services.model.serialize($defaultSpaceReference, 'local'))

                <dt>
                  <label for='spaceReference'>$services.localization.render('core.create.spaceReference.label')</label>
                  <span class='xHint'>$services.localization.render('core.create.spaceReference.hint')</span>
                </dt>
                <dd>
                  <input type='text' id='spaceReference' size='60' name='spaceReference' class='suggestSpaces' value="$!{escapetool.xml($defaultSpaceReferenceString)}"/>
                </dd>
                ##
                ## ---------------------------------------------------------------------------------------------------------
                ## Name field
                ## ---------------------------------------------------------------------------------------------------------
                ##
                #if ("$!name" == '')
                  #set ($defaultName = $services.localization.render('core.create.identifier.placeholder'))
                  #set ($nameIsPlaceholder = true)
                #else
                  #set ($defaultName = $name)
                #end

                <dt>
                  <label for='name'>$services.localization.render('core.create.identifier.label')</label>
                  <span class='xHint'>$services.localization.render('core.create.identifier.hint')</span>
                </dt>
                <dd>
                  <input type='text' id='name' size='60' name='name' value="$defaultName" #if ($nameIsPlaceholder)class='withTip'#end/>
                </dd>
            </div>
          </dd>
        </dl>
      </div>
    #else
      ## First column is hidden.
      ## Pass along the known values as hidden inputs.
      ##
      <input type='hidden' name='title' value="$!{escapetool.xml($title)}"/>
      <input type='hidden' id='name' name='name' value="$!{escapetool.xml($name)}" />
      #set ($spaceReferenceLocalString = $services.model.serialize($spaceReference, 'local'))
      <input type='hidden' id='spaceReference' name='spaceReference' value="$!{escapetool.xml($spaceReferenceLocalString)}" />
    #end
    ## FIXME: When displayed in an ajax call by clicking on a Wanted Link, the responsive classes consider the calling document (large screen)
    ## as the viewport and not the popup (small screen), so we can not use them since they create problems instead of fixing them.
    <div class='#if(!$request.ajax)col-xs-12 col-lg-6#end'>
      <dl>
        ## ---------------------------------------------------------------------------------------------------------
        ## Template field
        ## ---------------------------------------------------------------------------------------------------------
        #displayTemplateChoice()
        ## ---------------------------------------------------------------------------------------------------------
        ## Page type - Advanced users
        ## ---------------------------------------------------------------------------------------------------------
        #if (($xwiki.getUserPreference('usertype') == 'Advanced' || $isSuperAdmin) && !$deprecatedSpaceCreate)
          <dt>
            <label for='tocreate'>$services.localization.render('core.create.terminal.label')</label>
            <span class='xHint'>$services.localization.render('core.create.terminal.hint')</span>
          </dt>
          <dd>
            <label for='terminal'>
              <input type='checkbox' id='terminal' name='tocreate' value='terminal' #if(!$isSpace)checked='checked'#end/>
              $services.localization.render('core.create.terminal.status')
            </label>
          </dd>
        #end
      </dl>
    </div>
  </div>

  <div class='buttons'>
    <span class='buttonwrapper'>
      <input type='submit' class='button' value="$services.localization.render('create')"/>
    </span>
  </div>

</form>
